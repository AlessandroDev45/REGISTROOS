#!/usr/bin/env python3
"""
Debug para entender por que programa√ß√£o n√£o aparece no desenvolvimento
"""

import requests
import json

BASE_URL = "http://localhost:8000"

def main():
    print("üîç DEBUG: PROGRAMA√á√ÉO NO DESENVOLVIMENTO")
    print("=" * 60)
    
    # Criar sess√£o
    session = requests.Session()
    
    # 1. Fazer login
    print("1. Fazendo login...")
    login_data = {
        "username": "admin@registroos.com",
        "password": "123456"
    }
    
    try:
        login_response = session.post(f"{BASE_URL}/api/login", json=login_data)
        if login_response.status_code == 200:
            user_data = login_response.json()
            print(f"   ‚úÖ Login: {user_data.get('nome_completo', 'N/A')}")
            print(f"   üë§ ID: {user_data.get('id', 'N/A')}")
            print(f"   üè¢ Setor ID: {user_data.get('id_setor', 'N/A')}")
        else:
            print(f"   ‚ùå Erro no login: {login_response.status_code}")
            return
    except Exception as e:
        print(f"   ‚ùå Erro na conex√£o: {e}")
        return
    
    # 2. Verificar programa√ß√µes no PCP
    print("\n2. üè≠ Programa√ß√µes no PCP...")
    try:
        response = session.get(f"{BASE_URL}/api/pcp/programacoes")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ PCP: {len(data)} programa√ß√µes")
            
            for i, prog in enumerate(data):
                print(f"   {i+1}. ID: {prog.get('id')} | OS: {prog.get('os_numero')} | Respons√°vel: {prog.get('responsavel_id')} | Setor: {prog.get('id_setor')}")
        else:
            print(f"   ‚ùå Erro PCP: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    # 3. Verificar programa√ß√µes no desenvolvimento
    print("\n3. üîß Programa√ß√µes no desenvolvimento...")
    try:
        response = session.get(f"{BASE_URL}/api/desenvolvimento/programacao")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Desenvolvimento: {len(data)} programa√ß√µes")
            
            for i, prog in enumerate(data):
                print(f"   {i+1}. ID: {prog.get('id')} | OS: {prog.get('os_numero')} | Respons√°vel: {prog.get('responsavel_id')} | Setor: {prog.get('id_setor')}")
        else:
            print(f"   ‚ùå Erro desenvolvimento: {response.status_code}")
            print(f"   üìÑ Resposta: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    # 4. Verificar tabela programacao_pcp diretamente
    print("\n4. üìä Verificando tabela programacao_pcp...")
    try:
        # Fazer uma query SQL direta via endpoint de debug (se existir)
        # Ou criar programa√ß√£o espec√≠fica para teste
        
        programacao_teste = {
            "os_numero": "000099999",
            "inicio_previsto": "2025-09-26T16:00:00",
            "fim_previsto": "2025-09-26T18:00:00",
            "id_departamento": 1,
            "id_setor": None,  # Sem setor espec√≠fico
            "responsavel_id": 1,  # Admin como respons√°vel
            "observacoes": "Teste debug - sem setor",
            "status": "PROGRAMADA"
        }
        
        response = session.post(f"{BASE_URL}/api/pcp/programacoes", json=programacao_teste)
        
        if response.status_code in [200, 201]:
            data = response.json()
            print(f"   ‚úÖ Programa√ß√£o teste criada: ID {data.get('id')}")
            
            # Verificar se aparece no desenvolvimento
            print("\n   üîç Verificando se aparece no desenvolvimento...")
            dev_response = session.get(f"{BASE_URL}/api/desenvolvimento/programacao")
            
            if dev_response.status_code == 200:
                dev_data = dev_response.json()
                
                encontrada = False
                for prog in dev_data:
                    if prog.get('os_numero') == '000099999':
                        encontrada = True
                        print(f"   ‚úÖ ENCONTRADA! OS: {prog.get('os_numero')}")
                        break
                
                if not encontrada:
                    print(f"   ‚ùå N√ÉO ENCONTRADA! Total: {len(dev_data)} programa√ß√µes")
            
        else:
            print(f"   ‚ùå Erro ao criar teste: {response.status_code}")
            print(f"   üìÑ Resposta: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    print("\n" + "=" * 60)
    print("üéØ DEBUG CONCLU√çDO!")

if __name__ == "__main__":
    main()
