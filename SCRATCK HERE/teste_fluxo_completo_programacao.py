#!/usr/bin/env python3
"""
TESTE FLUXO COMPLETO PROGRAMA√á√ÉO
===============================

Testa o fluxo completo:
1. PCP cria programa√ß√£o
2. Supervisor atribui para colaborador
3. Colaborador v√™ no dashboard
"""

import requests
import sqlite3
from datetime import datetime, timedelta

# Configura√ß√£o
BASE_URL = "http://127.0.0.1:8000"
LOGIN_URL = f"{BASE_URL}/api/login"

# Usu√°rios de teste
ADMIN_USER = {"username": "admin@registroos.com", "password": "123456"}

def fazer_login(usuario):
    """Fazer login e obter sess√£o"""
    print(f"üîê Fazendo login como {usuario['username']}...")
    
    session = requests.Session()
    headers = {"Content-Type": "application/json"}
    
    response = session.post(LOGIN_URL, json=usuario, headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        user_info = data.get('user', {})
        print(f"‚úÖ Login realizado! Usu√°rio: {user_info.get('nome_completo', 'N/A')} (ID: {user_info.get('id', 'N/A')})")
        return session, user_info
    else:
        print(f"‚ùå Erro no login: {response.status_code}")
        return None, None

def verificar_usuarios_disponiveis():
    """Verificar usu√°rios dispon√≠veis no banco"""
    print("\nüîç Verificando usu√°rios dispon√≠veis...")
    
    db_path = "C:/Users/Alessandro/OneDrive/Desktop/RegistroOS/RegistroOS/registrooficial/backend/registroos_new.db"
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT id, nome_completo, email, privilege_level 
            FROM tipo_usuarios 
            WHERE privilege_level IN ('ADMIN', 'SUPERVISOR', 'USER')
            ORDER BY privilege_level, id
            LIMIT 10
        """)
        
        usuarios = cursor.fetchall()
        
        print(f"üìã Usu√°rios encontrados:")
        for user in usuarios:
            print(f"   ID {user[0]}: {user[1]} ({user[2]}) - {user[3]}")
        
        conn.close()
        return usuarios
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar usu√°rios: {e}")
        return []

def criar_programacao_via_banco():
    """Criar programa√ß√£o diretamente no banco para teste"""
    print("\nüß™ Criando programa√ß√£o de teste...")
    
    db_path = "C:/Users/Alessandro/OneDrive/Desktop/RegistroOS/RegistroOS/registrooficial/backend/registroos_new.db"
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Verificar se existe OS
        cursor.execute("SELECT id FROM ordens_servico LIMIT 1")
        os_result = cursor.fetchone()
        
        if not os_result:
            # Criar OS de teste
            cursor.execute("""
                INSERT INTO ordens_servico (os_numero, status_os, prioridade, created_at)
                VALUES ('TESTE-FLUXO-001', 'ABERTA', 'ALTA', ?)
            """, (datetime.now(),))
            os_id = cursor.lastrowid
            print(f"üìã OS criada: ID {os_id}")
        else:
            os_id = os_result[0]
            print(f"üìã Usando OS existente: ID {os_id}")
        
        # Criar programa√ß√£o
        agora = datetime.now()
        inicio = agora + timedelta(hours=2)
        fim = agora + timedelta(hours=10)
        
        cursor.execute("""
            INSERT INTO programacoes (
                id_ordem_servico, responsavel_id, inicio_previsto, fim_previsto,
                status, criado_por_id, observacoes, created_at, updated_at,
                historico
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            os_id, 1, inicio, fim, 'ENVIADA', 1,
            'Programa√ß√£o teste para verificar fluxo completo de atribui√ß√£o',
            agora, agora,
            f'[CRIA√á√ÉO] Programa√ß√£o criada para teste de fluxo em {agora.strftime("%d/%m/%Y %H:%M")}\n[ATRIBUI√á√ÉO] Atribu√≠da para ADMINISTRADOR em {agora.strftime("%d/%m/%Y %H:%M")}'
        ))
        
        prog_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        print(f"‚úÖ Programa√ß√£o criada! ID: {prog_id}")
        print(f"   OS ID: {os_id}")
        print(f"   Respons√°vel ID: 1 (Admin)")
        print(f"   Status: ENVIADA")
        print(f"   In√≠cio: {inicio.strftime('%d/%m/%Y %H:%M')}")
        print(f"   Fim: {fim.strftime('%d/%m/%Y %H:%M')}")
        
        return prog_id
        
    except Exception as e:
        print(f"‚ùå Erro ao criar programa√ß√£o: {e}")
        return None

def verificar_programacao_no_banco(prog_id):
    """Verificar se a programa√ß√£o foi criada corretamente"""
    print(f"\nüîç Verificando programa√ß√£o {prog_id} no banco...")
    
    db_path = "C:/Users/Alessandro/OneDrive/Desktop/RegistroOS/RegistroOS/registrooficial/backend/registroos_new.db"
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT p.id, p.responsavel_id, p.status, p.observacoes, p.historico,
                   u.nome_completo as responsavel_nome,
                   os.os_numero
            FROM programacoes p
            LEFT JOIN tipo_usuarios u ON p.responsavel_id = u.id
            LEFT JOIN ordens_servico os ON p.id_ordem_servico = os.id
            WHERE p.id = ?
        """, (prog_id,))
        
        result = cursor.fetchone()
        
        if result:
            print(f"‚úÖ Programa√ß√£o encontrada:")
            print(f"   ID: {result[0]}")
            print(f"   Respons√°vel ID: {result[1]}")
            print(f"   Respons√°vel Nome: {result[5]}")
            print(f"   Status: {result[2]}")
            print(f"   OS: {result[6]}")
            print(f"   Observa√ß√µes: {result[3]}")
            print(f"   Hist√≥rico: {result[4]}")
            conn.close()
            return True
        else:
            print(f"‚ùå Programa√ß√£o n√£o encontrada")
            conn.close()
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def testar_dashboard_colaborador(session, user_info):
    """Testar se a programa√ß√£o aparece no dashboard do colaborador"""
    print(f"\nüîç Testando dashboard do colaborador {user_info.get('nome_completo')}...")
    
    try:
        response = session.get(f"{BASE_URL}/api/desenvolvimento/minhas-programacoes")
        
        print(f"üìä Status da resposta: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"üìã Tipo de resposta: {type(data)}")
            print(f"üìã Quantidade de programa√ß√µes: {len(data) if isinstance(data, list) else 'N√£o √© lista'}")
            
            if isinstance(data, list) and len(data) > 0:
                print(f"‚úÖ SUCESSO! Dashboard funcionando!")
                print(f"üìã Programa√ß√µes no dashboard:")
                
                for i, prog in enumerate(data):
                    print(f"   {i+1}. ID: {prog.get('id')}")
                    print(f"      Status: {prog.get('status')}")
                    print(f"      OS: {prog.get('os_numero')}")
                    print(f"      Respons√°vel: {prog.get('responsavel_nome')}")
                    print(f"      Observa√ß√µes: {prog.get('observacoes', '')[:50]}...")
                
                return True
            else:
                print(f"‚ùå Dashboard vazio - programa√ß√£o n√£o aparece")
                return False
        else:
            print(f"‚ùå Erro HTTP: {response.status_code}")
            print(f"Resposta: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîß TESTE FLUXO COMPLETO PROGRAMA√á√ÉO")
    print("=" * 45)
    
    # 1. Verificar usu√°rios dispon√≠veis
    usuarios = verificar_usuarios_disponiveis()
    if not usuarios:
        print("‚ùå Nenhum usu√°rio encontrado")
        return
    
    # 2. Criar programa√ß√£o de teste
    prog_id = criar_programacao_via_banco()
    if not prog_id:
        print("‚ùå Falha ao criar programa√ß√£o")
        return
    
    # 3. Verificar se foi criada corretamente
    banco_ok = verificar_programacao_no_banco(prog_id)
    if not banco_ok:
        print("‚ùå Programa√ß√£o n√£o foi criada corretamente")
        return
    
    # 4. Testar login e dashboard do colaborador
    session, user_info = fazer_login(ADMIN_USER)
    if not session:
        print("‚ùå Falha no login")
        return
    
    # 5. Testar dashboard
    dashboard_ok = testar_dashboard_colaborador(session, user_info)
    
    # 6. Resumo final
    print(f"\nüìä RESUMO DO TESTE:")
    print(f"   Programa√ß√£o criada: {'‚úÖ' if prog_id else '‚ùå'}")
    print(f"   Verificada no banco: {'‚úÖ' if banco_ok else '‚ùå'}")
    print(f"   Aparece no dashboard: {'‚úÖ' if dashboard_ok else '‚ùå'}")
    
    if prog_id and banco_ok and dashboard_ok:
        print(f"\nüéâ SUCESSO TOTAL!")
        print(f"‚úÖ FLUXO DE ATRIBUI√á√ÉO FUNCIONANDO!")
        print(f"‚úÖ DASHBOARD DO COLABORADOR FUNCIONANDO!")
        print(f"\nüöÄ PR√ìXIMOS PASSOS:")
        print(f"   1. Adicionar campo 'Atribu√≠do para' na interface")
        print(f"   2. Mostrar hist√≥rico de atribui√ß√£o/edi√ß√£o")
        print(f"   3. Testar com usu√°rios reais diferentes")
    else:
        print(f"\n‚ö†Ô∏è PROBLEMAS IDENTIFICADOS:")
        if not dashboard_ok:
            print(f"   - Dashboard n√£o mostra programa√ß√µes")
            print(f"   - Poss√≠vel problema no endpoint ou query")
        print(f"\nüí° NECESS√ÅRIO:")
        print(f"   - Investigar por que programa√ß√£o n√£o aparece no dashboard")

if __name__ == "__main__":
    main()
