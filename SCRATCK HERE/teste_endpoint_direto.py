#!/usr/bin/env python3
"""
Teste direto do endpoint sem autentica√ß√£o para debug
"""

import requests
import json

def testar_endpoint_direto():
    """Testa o endpoint diretamente"""
    
    print("üîç TESTE DIRETO DO ENDPOINT")
    print("=" * 40)
    
    # Testar sem autentica√ß√£o primeiro para ver o erro
    try:
        print("\n1Ô∏è‚É£ Testando sem autentica√ß√£o...")
        response = requests.get("http://localhost:8000/api/desenvolvimento/formulario/os/12345", timeout=30)
        
        print(f"Status: {response.status_code}")
        
        if response.status_code == 401:
            print("‚úÖ Endpoint existe (erro de autentica√ß√£o esperado)")
            try:
                data = response.json()
                print(f"Mensagem: {data.get('detail', 'Sem detalhes')}")
            except:
                print(f"Resposta: {response.text[:100]}")
        else:
            print(f"‚ö†Ô∏è Status inesperado: {response.status_code}")
            try:
                data = response.json()
                print(f"Dados: {json.dumps(data, indent=2)}")
            except:
                print(f"Resposta: {response.text[:200]}")
                
    except requests.exceptions.ConnectionError:
        print("‚ùå Servidor n√£o est√° rodando")
        return False
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False
    
    # Testar endpoint de health
    try:
        print("\n2Ô∏è‚É£ Testando endpoint de health...")
        response = requests.get("http://localhost:8000/api/health", timeout=10)
        print(f"Health Status: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ Servidor est√° funcionando")
        else:
            print("‚ö†Ô∏è Servidor com problemas")
    except:
        print("‚ùå Endpoint de health n√£o responde")
    
    # Testar endpoint de docs
    try:
        print("\n3Ô∏è‚É£ Testando endpoint de docs...")
        response = requests.get("http://localhost:8000/docs", timeout=10)
        print(f"Docs Status: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ Documenta√ß√£o dispon√≠vel")
        else:
            print("‚ö†Ô∏è Documenta√ß√£o com problemas")
    except:
        print("‚ùå Endpoint de docs n√£o responde")
    
    return True

def verificar_estrutura_endpoints():
    """Verifica a estrutura dos endpoints"""
    
    print("\n4Ô∏è‚É£ Verificando estrutura de endpoints...")
    
    endpoints_para_testar = [
        "/api/desenvolvimento/formulario/os/12345",
        "/api/desenvolvimento/",
        "/api/",
        "/docs",
        "/api/health"
    ]
    
    for endpoint in endpoints_para_testar:
        try:
            response = requests.get(f"http://localhost:8000{endpoint}", timeout=5)
            print(f"   {endpoint}: {response.status_code}")
        except:
            print(f"   {endpoint}: ‚ùå Erro")

def main():
    """Fun√ß√£o principal"""
    print("üß™ TESTE DIRETO DO ENDPOINT")
    print("=" * 50)
    
    sucesso = testar_endpoint_direto()
    
    if sucesso:
        verificar_estrutura_endpoints()
    
    print("\n" + "=" * 50)
    print("üìä CONCLUS√ÉO:")
    print("   Se o endpoint retorna 401, est√° funcionando")
    print("   Se retorna 404, h√° problema na rota")
    print("   Se n√£o conecta, servidor n√£o est√° rodando")

if __name__ == "__main__":
    main()
