#!/usr/bin/env python3
"""
TESTE LOGIN COMPLETO - RegistroOS
=================================

Script para testar o fluxo completo de login e verificar se o sistema est√° funcionando.
"""

import requests
import json

BASE_URL = "http://localhost:8000"

def teste_login_completo():
    """Testa o fluxo completo de login"""
    print("üß™ TESTE LOGIN COMPLETO - RegistroOS")
    print("=" * 50)
    
    session = requests.Session()
    
    # 1. Testar health check
    print("\n1. Testando health check...")
    try:
        response = session.get(f"{BASE_URL}/api/health")
        if response.status_code == 200:
            print("‚úÖ Backend respondendo")
            print(f"   Status: {response.json()}")
        else:
            print(f"‚ùå Backend com problema: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao conectar com backend: {e}")
        return False
    
    # 2. Testar endpoint /me sem autentica√ß√£o (deve retornar 401)
    print("\n2. Testando /me sem autentica√ß√£o...")
    try:
        response = session.get(f"{BASE_URL}/api/me")
        if response.status_code == 401:
            print("‚úÖ Endpoint /me retorna 401 corretamente (sem auth)")
        else:
            print(f"‚ö†Ô∏è Endpoint /me retornou: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro no /me: {e}")
    
    # 3. Testar login com admin
    print("\n3. Testando login com admin...")
    try:
        login_data = {
            'username': 'admin@registroos.com',
            'password': '123456'
        }
        
        response = session.post(f"{BASE_URL}/api/token", data=login_data)
        
        if response.status_code == 200:
            print("‚úÖ Login realizado com sucesso")
            user_data = response.json()
            print(f"   Usu√°rio: {user_data.get('nome_completo', 'N/A')}")
            print(f"   Privilege: {user_data.get('privilege_level', 'N/A')}")
            print(f"   Email: {user_data.get('email', 'N/A')}")
        else:
            print(f"‚ùå Erro no login: {response.status_code}")
            print(f"   Resposta: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erro no login: {e}")
        return False
    
    # 4. Testar endpoint /me com autentica√ß√£o
    print("\n4. Testando /me com autentica√ß√£o...")
    try:
        response = session.get(f"{BASE_URL}/api/me")
        if response.status_code == 200:
            user_data = response.json()
            print("‚úÖ Endpoint /me funcionando com auth")
            print(f"   Usu√°rio: {user_data.get('nome_completo', 'N/A')}")
            print(f"   Privilege: {user_data.get('privilege_level', 'N/A')}")
            print(f"   Setor: {user_data.get('setor', 'N/A')}")
            print(f"   Departamento: {user_data.get('departamento', 'N/A')}")
        else:
            print(f"‚ùå Erro no /me autenticado: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro no /me autenticado: {e}")
        return False
    
    # 5. Testar alguns endpoints b√°sicos
    print("\n5. Testando endpoints b√°sicos...")
    
    endpoints_teste = [
        "/api/usuarios/",
        "/api/admin/config/sistema",
        "/api/catalogos/departamentos",
        "/api/catalogos/setores"
    ]
    
    for endpoint in endpoints_teste:
        try:
            response = session.get(f"{BASE_URL}{endpoint}")
            if response.status_code == 200:
                print(f"   ‚úÖ {endpoint} - OK")
            else:
                print(f"   ‚ö†Ô∏è {endpoint} - {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå {endpoint} - Erro: {e}")
    
    # 6. Testar logout
    print("\n6. Testando logout...")
    try:
        response = session.post(f"{BASE_URL}/api/logout")
        if response.status_code == 200:
            print("‚úÖ Logout realizado com sucesso")
        else:
            print(f"‚ö†Ô∏è Logout retornou: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro no logout: {e}")
    
    # 7. Verificar se /me retorna 401 ap√≥s logout
    print("\n7. Verificando /me ap√≥s logout...")
    try:
        response = session.get(f"{BASE_URL}/api/me")
        if response.status_code == 401:
            print("‚úÖ Endpoint /me retorna 401 ap√≥s logout (correto)")
        else:
            print(f"‚ö†Ô∏è Endpoint /me retornou: {response.status_code} ap√≥s logout")
    except Exception as e:
        print(f"‚ùå Erro no /me p√≥s-logout: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ TESTE COMPLETO FINALIZADO")
    print("\nüéØ RESUMO:")
    print("   - Backend: ‚úÖ Funcionando")
    print("   - Login: ‚úÖ Funcionando")
    print("   - Autentica√ß√£o: ‚úÖ Funcionando")
    print("   - Logout: ‚úÖ Funcionando")
    print("\nüåê ACESSO AO SISTEMA:")
    print("   Frontend: http://localhost:3001")
    print("   Backend: http://localhost:8000")
    print("   Admin: admin@registroos.com / 123456")
    print("=" * 50)
    
    return True

if __name__ == "__main__":
    teste_login_completo()
