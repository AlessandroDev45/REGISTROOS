#!/usr/bin/env python3
"""
Diagn√≥stico do Dashboard - verificar endpoints e autentica√ß√£o
"""

import requests
import json
from datetime import datetime

BASE_URL = "http://localhost:8000"

def testar_servidor():
    """Testa se o servidor est√° rodando"""
    print("üîç Testando servidor...")
    
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print(f"   ‚úÖ Servidor rodando: {response.json()}")
            return True
        else:
            print(f"   ‚ùå Servidor com problema: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Servidor n√£o acess√≠vel: {e}")
        return False

def testar_endpoints_dashboard():
    """Testa os endpoints que o Dashboard usa"""
    print("\nüìä Testando endpoints do Dashboard...")
    
    endpoints = [
        "/api/apontamentos-detalhados",
        "/api/pcp/programacoes", 
        "/api/pcp/pendencias",
        "/api/departamentos",
        "/api/setores"
    ]
    
    for endpoint in endpoints:
        try:
            response = requests.get(f"{BASE_URL}{endpoint}", timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, list):
                    print(f"   ‚úÖ {endpoint}: {len(data)} itens")
                else:
                    print(f"   ‚úÖ {endpoint}: OK (objeto)")
            elif response.status_code == 401:
                print(f"   üîê {endpoint}: Requer autentica√ß√£o")
            else:
                print(f"   ‚ùå {endpoint}: Erro {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå {endpoint}: Exce√ß√£o {e}")

def testar_com_autenticacao():
    """Testa endpoints com autentica√ß√£o simulada"""
    print("\nüîê Testando com autentica√ß√£o...")
    
    # Simular login para obter token/cookie
    login_data = {
        "username": "admin",  # Ajuste conforme necess√°rio
        "password": "admin123"  # Ajuste conforme necess√°rio
    }
    
    session = requests.Session()
    
    try:
        # Tentar fazer login
        login_response = session.post(f"{BASE_URL}/api/auth/login", json=login_data)
        
        if login_response.status_code == 200:
            print("   ‚úÖ Login realizado com sucesso")
            
            # Testar endpoints com sess√£o autenticada
            endpoints = [
                "/api/apontamentos-detalhados",
                "/api/pcp/programacoes", 
                "/api/pcp/pendencias"
            ]
            
            for endpoint in endpoints:
                try:
                    response = session.get(f"{BASE_URL}{endpoint}")
                    
                    if response.status_code == 200:
                        data = response.json()
                        if isinstance(data, list):
                            print(f"   ‚úÖ {endpoint}: {len(data)} itens (autenticado)")
                        else:
                            print(f"   ‚úÖ {endpoint}: OK (autenticado)")
                    else:
                        print(f"   ‚ùå {endpoint}: Erro {response.status_code} (autenticado)")
                        
                except Exception as e:
                    print(f"   ‚ùå {endpoint}: Exce√ß√£o {e}")
        else:
            print(f"   ‚ùå Falha no login: {login_response.status_code}")
            print(f"   üìÑ Resposta: {login_response.text[:200]}")
            
    except Exception as e:
        print(f"   ‚ùå Erro no processo de login: {e}")

def verificar_dados_banco():
    """Verifica se h√° dados no banco para o Dashboard"""
    print("\nüíæ Verificando dados no banco...")
    
    import sqlite3
    import os
    
    db_path = "RegistroOS/registrooficial/backend/app/registroos_new.db"
    
    if not os.path.exists(db_path):
        print(f"   ‚ùå Banco n√£o encontrado: {db_path}")
        return
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Verificar tabelas principais
        tabelas = [
            ("apontamentos_detalhados", "Apontamentos"),
            ("programacoes", "Programa√ß√µes"),
            ("pendencias", "Pend√™ncias"),
            ("ordens_servico", "Ordens de Servi√ßo"),
            ("tipo_usuarios", "Usu√°rios")
        ]
        
        for tabela, nome in tabelas:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {tabela}")
                count = cursor.fetchone()[0]
                print(f"   üìä {nome}: {count} registros")
            except Exception as e:
                print(f"   ‚ùå {nome}: Erro ao contar - {e}")
        
        conn.close()
        
    except Exception as e:
        print(f"   ‚ùå Erro ao acessar banco: {e}")

def verificar_configuracao_frontend():
    """Verifica configura√ß√£o do frontend"""
    print("\nüåê Verificando configura√ß√£o do frontend...")
    
    # Verificar se o proxy est√° configurado
    try:
        # Testar acesso direto ao frontend
        frontend_response = requests.get("http://localhost:3001", timeout=5)
        if frontend_response.status_code == 200:
            print("   ‚úÖ Frontend acess√≠vel em localhost:3001")
        else:
            print(f"   ‚ùå Frontend com problema: {frontend_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Frontend n√£o acess√≠vel: {e}")
    
    # Verificar proxy para API
    try:
        proxy_response = requests.get("http://localhost:3001/api/health", timeout=5)
        if proxy_response.status_code == 200:
            print("   ‚úÖ Proxy API funcionando")
        else:
            print(f"   ‚ùå Proxy API com problema: {proxy_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Proxy API n√£o funcionando: {e}")

def sugerir_solucoes():
    """Sugere solu√ß√µes baseadas nos problemas encontrados"""
    print("\nüí° POSS√çVEIS SOLU√á√ïES:")
    print("=" * 60)
    
    print("1. üîê PROBLEMA DE AUTENTICA√á√ÉO:")
    print("   - Verifique se o usu√°rio est√° logado no frontend")
    print("   - Confirme se os cookies de autentica√ß√£o est√£o sendo enviados")
    print("   - Teste fazer logout e login novamente")
    
    print("\n2. üåê PROBLEMA DE PROXY/CORS:")
    print("   - Verifique se o proxy est√° configurado no package.json")
    print("   - Confirme se o backend est√° rodando na porta 8000")
    print("   - Teste acessar a API diretamente no navegador")
    
    print("\n3. üíæ PROBLEMA DE DADOS:")
    print("   - Execute o script de cria√ß√£o de dados de teste")
    print("   - Verifique se h√° dados nas tabelas do banco")
    print("   - Confirme se as migra√ß√µes foram executadas")
    
    print("\n4. üîß PROBLEMA DE CONFIGURA√á√ÉO:")
    print("   - Reinicie o servidor backend")
    print("   - Reinicie o servidor frontend")
    print("   - Limpe o cache do navegador")
    
    print("\n5. üìä PROBLEMA ESPEC√çFICO DO DASHBOARD:")
    print("   - Verifique o console do navegador para erros JavaScript")
    print("   - Confirme se todos os endpoints est√£o respondendo")
    print("   - Teste acessar outras p√°ginas da aplica√ß√£o")

def main():
    """Fun√ß√£o principal"""
    print("üö® DIAGN√ìSTICO DO DASHBOARD")
    print("=" * 60)
    print(f"‚è∞ Executado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print("=" * 60)
    
    # Executar testes
    servidor_ok = testar_servidor()
    
    if servidor_ok:
        testar_endpoints_dashboard()
        testar_com_autenticacao()
    
    verificar_dados_banco()
    verificar_configuracao_frontend()
    sugerir_solucoes()
    
    print("\n" + "=" * 60)
    print("üéØ DIAGN√ìSTICO CONCLU√çDO!")
    print("\nPr√≥ximos passos:")
    print("1. Analise os resultados acima")
    print("2. Implemente as solu√ß√µes sugeridas")
    print("3. Teste o Dashboard novamente")
    print("4. Se o problema persistir, verifique os logs do backend")

if __name__ == "__main__":
    main()
