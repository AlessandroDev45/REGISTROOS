#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para criar apontamentos usando a hierarquia TESTE
"""

import requests
import json
from datetime import datetime, timedelta

BASE_URL = 'http://localhost:8000'

def test_login():
    """Faz login e retorna cookies"""
    print("üîê Fazendo login...")
    
    login_data = {
        "username": "admin@registroos.com",
        "password": "123456"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/api/token", data=login_data)
        if response.status_code == 200:
            print("   ‚úÖ Login realizado com sucesso")
            return response.cookies
        else:
            print(f"   ‚ùå Erro no login: {response.status_code}")
            return None
    except Exception as e:
        print(f"   ‚ùå Erro na requisi√ß√£o de login: {e}")
        return None

def criar_apontamento_sem_pendencia(cookies):
    """Cria apontamento sem pend√™ncia usando hierarquia TESTE"""
    print("\nüìù Criando apontamento SEM PEND√äNCIA...")
    
    apontamento_data = {
        "inpNumOS": "TEST001",
        "inpCliente": "CLIENTE TESTE HIERARQUIA",
        "inpEquipamento": "EQUIPAMENTO TESTE A",
        "selMaq": "EQUIPAMENTO TESTE A",
        "selAtiv": "EXECU√á√ÉO DE TESTE",
        "selDescAtiv": "EXEC_001",
        "inpData": "2025-01-16",
        "inpHora": "08:00",
        "inpDataFim": "2025-01-16",
        "inpHoraFim": "17:00",
        "observacao": "Apontamento de teste usando hierarquia TESTE - Execu√ß√£o completa",
        "observacao_geral": "Teste funcional b√°sico executado com sucesso no Equipamento Teste A",
        "resultado_global": "APROVADO",
        "departamento": "TESTE",
        "setor": "TESTES",
        "testes": {
            "347": "APROVADO",  # TESTE FUNCIONAL B√ÅSICO
            "348": "APROVADO",  # TESTE DE PERFORMANCE
            "349": "APROVADO"   # TESTE DE SEGURAN√áA
        },
        "observacoes_testes": {
            "347": "Teste funcional b√°sico executado conforme procedimento EXEC_001",
            "348": "Performance dentro dos par√¢metros esperados",
            "349": "Todos os sistemas de seguran√ßa funcionando corretamente"
        }
    }
    
    try:
        response = requests.post(f"{BASE_URL}/api/save-apontamento", 
                               json=apontamento_data, 
                               cookies=cookies)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ Apontamento SEM PEND√äNCIA criado: ID {result.get('apontamento_id')}")
            return result.get('apontamento_id')
        else:
            print(f"   ‚ùå Erro: {response.text}")
            return None
        
    except Exception as e:
        print(f"   ‚ùå Erro ao criar apontamento: {e}")
        return None

def criar_apontamento_com_pendencia(cookies):
    """Cria apontamento com pend√™ncia usando hierarquia TESTE"""
    print("\nüìã Criando apontamento COM PEND√äNCIA...")
    
    apontamento_data = {
        "inpNumOS": "TEST002",
        "inpCliente": "CLIENTE TESTE PENDENCIA",
        "inpEquipamento": "EQUIPAMENTO TESTE B",
        "selMaq": "EQUIPAMENTO TESTE B",
        "selAtiv": "AN√ÅLISE DE RESULTADOS",
        "selDescAtiv": "ANAL_001",
        "inpData": "2025-01-16",
        "inpHora": "09:00",
        "observacao": "Apontamento com pend√™ncia - An√°lise incompleta",
        "observacao_geral": "Teste de durabilidade iniciado mas necessita an√°lise adicional",
        "resultado_global": "INCONCLUSIVO",
        "departamento": "TESTE",
        "setor": "TESTES",
        "testes": {
            "350": "INCONCLUSIVO",  # TESTE DE DURABILIDADE
            "351": "REPROVADO"      # TESTE DE CALIBRA√á√ÉO
        },
        "observacoes_testes": {
            "350": "Teste de durabilidade interrompido - necessita continua√ß√£o",
            "351": "Calibra√ß√£o fora dos par√¢metros - necessita ajuste"
        },
        "pendencia_descricao": "Equipamento necessita recalibra√ß√£o e continua√ß√£o do teste de durabilidade",
        "pendencia_prioridade": "ALTA"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/api/save-apontamento-with-pendencia", 
                               json=apontamento_data, 
                               cookies=cookies)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ Apontamento COM PEND√äNCIA criado: ID {result.get('apontamento_id')}")
            print(f"   ‚úÖ Pend√™ncia criada: ID {result.get('pendencia_id')}")
            return result.get('apontamento_id'), result.get('pendencia_id')
        else:
            print(f"   ‚ùå Erro: {response.text}")
            return None, None
        
    except Exception as e:
        print(f"   ‚ùå Erro ao criar apontamento com pend√™ncia: {e}")
        return None, None

def criar_apontamento_documentacao(cookies):
    """Cria apontamento de documenta√ß√£o usando hierarquia TESTE"""
    print("\nüìÑ Criando apontamento de DOCUMENTA√á√ÉO...")
    
    apontamento_data = {
        "inpNumOS": "TEST003",
        "inpCliente": "CLIENTE TESTE DOCUMENTACAO",
        "inpEquipamento": "EQUIPAMENTO TESTE C",
        "selMaq": "EQUIPAMENTO TESTE C",
        "selAtiv": "DOCUMENTA√á√ÉO",
        "selDescAtiv": "DOC_002",
        "inpData": "2025-01-16",
        "inpHora": "14:00",
        "inpDataFim": "2025-01-16",
        "inpHoraFim": "16:00",
        "observacao": "Documenta√ß√£o completa dos testes realizados",
        "observacao_geral": "Relat√≥rio detalhado conforme procedimento DOC_002",
        "resultado_global": "APROVADO",
        "departamento": "TESTE",
        "setor": "TESTES",
        "testes": {
            "347": "APROVADO",  # TESTE FUNCIONAL B√ÅSICO
            "349": "APROVADO"   # TESTE DE SEGURAN√áA
        },
        "observacoes_testes": {
            "347": "Documenta√ß√£o do teste funcional completa",
            "349": "Relat√≥rio de seguran√ßa elaborado conforme normas"
        }
    }
    
    try:
        response = requests.post(f"{BASE_URL}/api/save-apontamento", 
                               json=apontamento_data, 
                               cookies=cookies)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ Apontamento de DOCUMENTA√á√ÉO criado: ID {result.get('apontamento_id')}")
            return result.get('apontamento_id')
        else:
            print(f"   ‚ùå Erro: {response.text}")
            return None
        
    except Exception as e:
        print(f"   ‚ùå Erro ao criar apontamento de documenta√ß√£o: {e}")
        return None

def listar_meus_apontamentos(cookies):
    """Lista os apontamentos criados"""
    print("\nüë§ Listando MEUS APONTAMENTOS...")
    
    try:
        response = requests.get(f"{BASE_URL}/api/os/apontamentos/meus", cookies=cookies)
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            apontamentos = response.json()
            print(f"   ‚úÖ {len(apontamentos)} apontamentos encontrados:")
            
            for apt in apontamentos:
                print(f"\n      üìù Apontamento ID: {apt.get('id')}")
                print(f"         OS: {apt.get('numero_os')}")
                print(f"         Status: {apt.get('status')}")
                print(f"         Data: {apt.get('data_inicio')}")
                print(f"         Observa√ß√µes: {apt.get('observacoes', 'N/A')}")
                print(f"         Retrabalho: {'Sim' if apt.get('foi_retrabalho') else 'N√£o'}")
            
            return apontamentos
        else:
            print(f"   ‚ùå Erro: {response.text}")
            return []
        
    except Exception as e:
        print(f"   ‚ùå Erro ao listar apontamentos: {e}")
        return []

def pesquisar_apontamentos(cookies):
    """Pesquisa apontamentos por filtros"""
    print("\nüîç Pesquisando APONTAMENTOS...")
    
    # Pesquisar por data
    try:
        params = {
            "data": "2025-01-16"
        }
        response = requests.get(f"{BASE_URL}/api/os/apontamentos/meus", 
                              params=params, cookies=cookies)
        print(f"   Status pesquisa por data: {response.status_code}")
        
        if response.status_code == 200:
            apontamentos = response.json()
            print(f"   ‚úÖ {len(apontamentos)} apontamentos encontrados para 2025-01-16")
            
            for apt in apontamentos:
                print(f"      - OS {apt.get('numero_os')}: {apt.get('status')}")
            
            return apontamentos
        else:
            print(f"   ‚ùå Erro na pesquisa: {response.text}")
            return []
        
    except Exception as e:
        print(f"   ‚ùå Erro ao pesquisar apontamentos: {e}")
        return []

def testar_relatorio_completo(cookies, apontamento_id):
    """Testa a funcionalidade de relat√≥rio completo"""
    print(f"\nüìä Testando RELAT√ìRIO COMPLETO para apontamento {apontamento_id}...")
    
    # Simular dados do relat√≥rio (j√° que n√£o temos endpoint espec√≠fico ainda)
    relatorio_data = {
        "apontamento_id": apontamento_id,
        "numero_os": "TEST001",
        "cliente": "CLIENTE TESTE HIERARQUIA",
        "equipamento": "EQUIPAMENTO TESTE A",
        "departamento": "TESTE",
        "setor": "TESTES",
        "data_inicio": "2025-01-16 08:00",
        "data_fim": "2025-01-16 17:00",
        "resultado_global": "APROVADO",
        "testes_realizados": [
            {
                "nome": "TESTE FUNCIONAL B√ÅSICO",
                "resultado": "APROVADO",
                "observacao": "Teste funcional b√°sico executado conforme procedimento EXEC_001"
            },
            {
                "nome": "TESTE DE PERFORMANCE",
                "resultado": "APROVADO", 
                "observacao": "Performance dentro dos par√¢metros esperados"
            },
            {
                "nome": "TESTE DE SEGURAN√áA",
                "resultado": "APROVADO",
                "observacao": "Todos os sistemas de seguran√ßa funcionando corretamente"
            }
        ],
        "observacao_geral": "Teste funcional b√°sico executado com sucesso no Equipamento Teste A"
    }
    
    print("   ‚úÖ Dados do relat√≥rio simulados:")
    print(f"      üìã OS: {relatorio_data['numero_os']}")
    print(f"      üè¢ Departamento: {relatorio_data['departamento']}")
    print(f"      üè≠ Setor: {relatorio_data['setor']}")
    print(f"      üéØ Resultado: {relatorio_data['resultado_global']}")
    print(f"      üß™ Testes: {len(relatorio_data['testes_realizados'])} realizados")
    
    # Salvar relat√≥rio em arquivo
    with open("SCRATCK HERE/relatorio_apontamento_exemplo.json", "w", encoding="utf-8") as f:
        json.dump(relatorio_data, f, indent=2, ensure_ascii=False)
    
    print("   ‚úÖ Relat√≥rio salvo em 'relatorio_apontamento_exemplo.json'")
    
    return relatorio_data

def main():
    """Fun√ß√£o principal para criar e testar apontamentos"""
    print("üöÄ CRIANDO APONTAMENTOS USANDO HIERARQUIA TESTE")
    print("=" * 60)

    # 1. Login
    cookies = test_login()
    if not cookies:
        print("‚ùå N√£o foi poss√≠vel fazer login. Abortando.")
        return

    # 2. Criar apontamento sem pend√™ncia
    apt_id_1 = criar_apontamento_sem_pendencia(cookies)

    # 3. Criar apontamento com pend√™ncia
    apt_id_2, pend_id = criar_apontamento_com_pendencia(cookies)

    # 4. Criar apontamento de documenta√ß√£o
    apt_id_3 = criar_apontamento_documentacao(cookies)

    # 5. Listar meus apontamentos
    meus_apontamentos = listar_meus_apontamentos(cookies)

    # 6. Pesquisar apontamentos
    apontamentos_pesquisa = pesquisar_apontamentos(cookies)

    # 7. Testar relat√≥rio completo
    if apt_id_1:
        relatorio = testar_relatorio_completo(cookies, apt_id_1)

    print("\n" + "=" * 60)
    print("üéØ RESUMO DOS APONTAMENTOS CRIADOS:")
    print(f"   üìù Apontamento sem pend√™ncia: {'‚úÖ Criado' if apt_id_1 else '‚ùå Erro'}")
    print(f"   üìã Apontamento com pend√™ncia: {'‚úÖ Criado' if apt_id_2 else '‚ùå Erro'}")
    print(f"   üìÑ Apontamento documenta√ß√£o: {'‚úÖ Criado' if apt_id_3 else '‚ùå Erro'}")
    print(f"   üë§ Meus apontamentos: {len(meus_apontamentos)} encontrados")
    print(f"   üîç Pesquisa por data: {len(apontamentos_pesquisa)} encontrados")

    print("\nüåü HIERARQUIA TESTE FUNCIONANDO:")
    print("   ‚úÖ Departamento TESTE ativo")
    print("   ‚úÖ Setor TESTES configurado")
    print("   ‚úÖ Equipamentos A, B, C dispon√≠veis")
    print("   ‚úÖ Tipos de teste funcionando")
    print("   ‚úÖ Atividades e descri√ß√µes integradas")
    print("   ‚úÖ Sistema de apontamentos operacional")

    print("\nüöÄ PR√ìXIMOS PASSOS:")
    print("   1. Acessar frontend em http://localhost:3001")
    print("   2. Ir para 'Meus Apontamentos' para ver os criados")
    print("   3. Usar 'Pesquisa de Apontamentos' para filtrar")
    print("   4. Clicar em 'üìä Ver Relat√≥rio' para relat√≥rio completo")
    print("   5. Testar sistema de programa√ß√£o")

if __name__ == "__main__":
    main()
