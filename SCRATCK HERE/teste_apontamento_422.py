#!/usr/bin/env python3
"""
Teste para reproduzir o erro 422 no endpoint /api/desenvolvimento/os/apontamentos
"""

import requests
import json
from datetime import datetime

# Configura√ß√µes
BASE_URL = "http://localhost:8000"
LOGIN_URL = f"{BASE_URL}/api/token"
APONTAMENTO_URL = f"{BASE_URL}/api/desenvolvimento/os/apontamentos"

def fazer_login():
    """Fazer login e obter cookies de sess√£o"""
    print("üîê Fazendo login...")
    
    login_data = {
        "username": "admin@registroos.com",
        "password": "123456"
    }
    
    response = requests.post(LOGIN_URL, data=login_data)
    
    if response.status_code == 200:
        print("‚úÖ Login realizado com sucesso!")
        return response.cookies
    else:
        print(f"‚ùå Erro no login: {response.status_code}")
        print(response.text)
        return None

def testar_endpoint_apontamento(cookies):
    """Testar o endpoint que est√° falhando"""
    print(f"\nüîç Testando endpoint: {APONTAMENTO_URL}")
    
    # Dados similares ao que o frontend enviaria
    dados_frontend = {
        "numero_os": "TEST-APT-001",
        "status_os": "FINALIZADO",
        "cliente": "Cliente Teste",
        "equipamento": "Equipamento Teste",
        "tipo_maquina": "MOTOR",
        "tipo_atividade": "TESTE",
        "descricao_atividade": "Teste de funcionamento",
        "categoria_maquina": "MOTOR ELETRICO",
        "subcategorias_maquina": "MOTOR CA",
        "data_inicio": datetime.now().strftime('%Y-%m-%d'),
        "hora_inicio": "08:00",
        "data_fim": datetime.now().strftime('%Y-%m-%d'),
        "hora_fim": "17:00",
        "retrabalho": False,
        "causa_retrabalho": None,
        "observacao_geral": "Observa√ß√£o do teste",
        "resultado_global": "APROVADO",
        "usuario_id": 1,
        "departamento": "MOTORES",
        "setor": "LABORATORIO",
        "testes_selecionados": [],
        "testes_exclusivos_selecionados": [],
        "tipo_salvamento": "APONTAMENTO",
        "supervisor_config": {
            "horas_orcadas": 8.0,
            "testes_iniciais": True,
            "testes_parciais": False,
            "testes_finais": True
        },
        "pendencia_origem_id": None
    }
    
    print(f"üìã Dados de teste:")
    for key, value in dados_frontend.items():
        print(f"   {key}: {value}")
    
    try:
        print(f"\nüöÄ Enviando requisi√ß√£o...")
        response = requests.post(
            APONTAMENTO_URL, 
            cookies=cookies,
            json=dados_frontend,
            headers={'Content-Type': 'application/json'}
        )
        
        print(f"üìä Status da resposta: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ Sucesso!")
            data = response.json()
            print(f"üìã Resposta:")
            for key, value in data.items():
                print(f"   {key}: {value}")
            return True
        elif response.status_code == 422:
            print(f"‚ùå Erro 422 - Unprocessable Entity")
            print(f"üìã Detalhes do erro de valida√ß√£o:")
            try:
                error_data = response.json()
                print(f"   {json.dumps(error_data, indent=2)}")
                
                # Analisar detalhes do erro
                if 'detail' in error_data:
                    for error in error_data['detail']:
                        if isinstance(error, dict):
                            campo = error.get('loc', ['unknown'])[-1]
                            mensagem = error.get('msg', 'Erro desconhecido')
                            tipo = error.get('type', 'unknown')
                            print(f"   üî¥ Campo '{campo}': {mensagem} (tipo: {tipo})")
                        
            except:
                print(f"   {response.text}")
            return False
        else:
            print(f"‚ùå Erro {response.status_code}")
            print(f"   {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return False

def testar_campos_obrigatorios(cookies):
    """Testar apenas com campos obrigat√≥rios"""
    print(f"\nüîç Testando apenas campos obrigat√≥rios...")
    
    dados_minimos = {
        "numero_os": "MIN-APT-001"
    }
    
    print(f"üìã Dados m√≠nimos:")
    for key, value in dados_minimos.items():
        print(f"   {key}: {value}")
    
    try:
        response = requests.post(
            APONTAMENTO_URL, 
            cookies=cookies,
            json=dados_minimos,
            headers={'Content-Type': 'application/json'}
        )
        
        print(f"üìä Status: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ Sucesso com dados m√≠nimos!")
            return True
        elif response.status_code == 422:
            print(f"‚ùå Erro 422 com dados m√≠nimos")
            try:
                error_data = response.json()
                print(f"   Erros de valida√ß√£o:")
                for error in error_data.get('detail', []):
                    if isinstance(error, dict):
                        campo = error.get('loc', ['unknown'])[-1]
                        mensagem = error.get('msg', 'Erro desconhecido')
                        print(f"   üî¥ {campo}: {mensagem}")
            except:
                print(f"   {response.text}")
            return False
        else:
            print(f"‚ùå Erro {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def testar_sem_campos_problematicos(cookies):
    """Testar removendo campos que podem estar causando problema"""
    print(f"\nüîç Testando sem campos potencialmente problem√°ticos...")
    
    dados_limpos = {
        "numero_os": "CLEAN-001",
        "cliente": "Cliente Teste",
        "equipamento": "Equipamento Teste",
        "tipo_maquina": "MOTOR",
        "tipo_atividade": "TESTE",
        "descricao_atividade": "Teste",
        "data_inicio": datetime.now().strftime('%Y-%m-%d'),
        "hora_inicio": "08:00",
        "observacao_geral": "Teste"
    }
    
    print(f"üìã Dados limpos:")
    for key, value in dados_limpos.items():
        print(f"   {key}: {value}")
    
    try:
        response = requests.post(
            APONTAMENTO_URL, 
            cookies=cookies,
            json=dados_limpos,
            headers={'Content-Type': 'application/json'}
        )
        
        print(f"üìä Status: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ Sucesso com dados limpos!")
            return True
        elif response.status_code == 422:
            print(f"‚ùå Ainda erro 422")
            try:
                error_data = response.json()
                print(f"   Erros:")
                for error in error_data.get('detail', []):
                    if isinstance(error, dict):
                        campo = error.get('loc', ['unknown'])[-1]
                        mensagem = error.get('msg', 'Erro desconhecido')
                        print(f"   üî¥ {campo}: {mensagem}")
            except:
                print(f"   {response.text}")
            return False
        else:
            print(f"‚ùå Erro {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üß™ TESTE: Reproduzir Erro 422 - /api/desenvolvimento/os/apontamentos")
    print("=" * 70)
    
    # Fazer login
    cookies = fazer_login()
    if not cookies:
        return
    
    # Teste 1: Campos obrigat√≥rios apenas
    testar_campos_obrigatorios(cookies)
    
    # Teste 2: Dados limpos
    testar_sem_campos_problematicos(cookies)
    
    # Teste 3: Dados completos do frontend
    sucesso = testar_endpoint_apontamento(cookies)
    
    print("\n" + "=" * 70)
    if sucesso:
        print("üèÅ ‚úÖ Endpoint funcionando corretamente!")
    else:
        print("üèÅ ‚ùå Endpoint com problemas de valida√ß√£o!")
        print("\nüí° Pr√≥ximos passos:")
        print("   1. Verificar modelo Pydantic ApontamentoCreate")
        print("   2. Verificar se campos obrigat√≥rios est√£o sendo enviados")
        print("   3. Verificar tipos de dados dos campos")
        print("   4. Verificar se h√° campos extras n√£o permitidos")

if __name__ == "__main__":
    main()
