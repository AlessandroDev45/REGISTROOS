#!/usr/bin/env python3
"""
Verificar se o endpoint est√° na documenta√ß√£o OpenAPI
"""

import requests
import json

def verificar_openapi():
    """Verifica se o endpoint est√° na documenta√ß√£o OpenAPI"""
    
    try:
        print("üîç Verificando documenta√ß√£o OpenAPI...")
        response = requests.get("http://localhost:8000/openapi.json", timeout=10)
        
        if response.status_code == 200:
            openapi_data = response.json()
            paths = openapi_data.get('paths', {})
            
            print(f"‚úÖ OpenAPI carregado com {len(paths)} endpoints")
            
            # Procurar endpoints de desenvolvimento
            desenvolvimento_paths = []
            for path, methods in paths.items():
                if 'desenvolvimento' in path:
                    for method in methods.keys():
                        desenvolvimento_paths.append(f"{method.upper()} {path}")
            
            print(f"\nüìã Endpoints de desenvolvimento encontrados ({len(desenvolvimento_paths)}):")
            for endpoint in desenvolvimento_paths:
                print(f"   - {endpoint}")
            
            # Procurar especificamente pelo endpoint de formul√°rio
            formulario_found = False
            for path in paths.keys():
                if 'formulario/os' in path:
                    print(f"\n‚úÖ ENDPOINT DE FORMUL√ÅRIO ENCONTRADO: {path}")
                    
                    # Mostrar detalhes do endpoint
                    path_info = paths[path]
                    for method, details in path_info.items():
                        print(f"   M√©todo: {method.upper()}")
                        print(f"   Opera√ß√£o: {details.get('operationId', 'N/A')}")
                        print(f"   Resumo: {details.get('summary', 'N/A')}")
                    
                    formulario_found = True
                    break
            
            if not formulario_found:
                print("\n‚ùå ENDPOINT DE FORMUL√ÅRIO N√ÉO ENCONTRADO")
                print("   O endpoint /desenvolvimento/formulario/os/{numero_os} n√£o est√° na documenta√ß√£o")
                print("   Isso indica que o servidor n√£o carregou as mudan√ßas")
            
            return formulario_found
            
        else:
            print(f"‚ùå Erro ao obter OpenAPI: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar OpenAPI: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üß™ VERIFICA√á√ÉO DA DOCUMENTA√á√ÉO OPENAPI")
    print("=" * 50)
    
    endpoint_encontrado = verificar_openapi()
    
    print("\n" + "=" * 50)
    print("üìä RESULTADO:")
    if endpoint_encontrado:
        print("‚úÖ ENDPOINT EST√Å REGISTRADO")
        print("   O problema pode estar na autentica√ß√£o ou na l√≥gica do endpoint")
    else:
        print("‚ùå ENDPOINT N√ÉO EST√Å REGISTRADO")
        print("   SOLU√á√ïES:")
        print("   1. Reiniciar o servidor backend")
        print("   2. Verificar se h√° erros de sintaxe no c√≥digo")
        print("   3. Verificar se o router est√° sendo inclu√≠do corretamente")
        print("\n   COMANDO PARA REINICIAR:")
        print("   cd RegistroOS/registrooficial/backend")
        print("   python -m uvicorn main:app --reload")

if __name__ == "__main__":
    main()
