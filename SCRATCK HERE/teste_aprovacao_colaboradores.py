#!/usr/bin/env python3
"""
Teste para verificar a funcionalidade de aprova√ß√£o de colaboradores
"""

import requests
import json
import sys
import os

# Configura√ß√µes
BASE_URL = "http://localhost:8000"
ADMIN_EMAIL = "admin@teste.com"
ADMIN_PASSWORD = "admin123"

def fazer_login_admin():
    """Faz login como administrador"""
    print("üîê Fazendo login como administrador...")
    
    login_data = {
        "username": ADMIN_EMAIL,
        "password": ADMIN_PASSWORD
    }
    
    response = requests.post(f"{BASE_URL}/auth/login", data=login_data)
    
    if response.status_code == 200:
        data = response.json()
        token = data.get("access_token")
        user_info = data.get("user", {})
        print(f"‚úÖ Login realizado com sucesso!")
        print(f"üë§ Usu√°rio: {user_info.get('nome_completo')}")
        print(f"üîë Privil√©gio: {user_info.get('privilege_level')}")
        return token
    else:
        print(f"‚ùå Erro no login: {response.status_code}")
        print(f"Resposta: {response.text}")
        return None

def buscar_usuarios_pendentes(token):
    """Busca usu√°rios pendentes de aprova√ß√£o"""
    print("\nüìã Buscando usu√°rios pendentes...")
    
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(f"{BASE_URL}/users/pending-approval", headers=headers)
    
    if response.status_code == 200:
        usuarios = response.json()
        print(f"‚úÖ Encontrados {len(usuarios)} usu√°rios pendentes")
        
        for i, usuario in enumerate(usuarios, 1):
            print(f"\nüë§ Usu√°rio {i}:")
            print(f"   ID: {usuario.get('id')}")
            print(f"   Nome: {usuario.get('nome_completo')}")
            print(f"   Email: {usuario.get('email')}")
            print(f"   Setor: {usuario.get('setor', 'N√£o definido')}")
            print(f"   Aprovado: {usuario.get('is_approved')}")
            print(f"   Privil√©gio: {usuario.get('privilege_level')}")
        
        return usuarios
    else:
        print(f"‚ùå Erro ao buscar usu√°rios pendentes: {response.status_code}")
        print(f"Resposta: {response.text}")
        return []

def aprovar_usuario(token, user_id, privilege_level="USER"):
    """Aprova um usu√°rio"""
    print(f"\n‚úÖ Aprovando usu√°rio ID {user_id}...")
    
    headers = {"Authorization": f"Bearer {token}"}
    data = {
        "privilege_level": privilege_level,
        "trabalha_producao": True
    }
    
    response = requests.put(f"{BASE_URL}/users/usuarios/{user_id}/approve", 
                          headers=headers, json=data)
    
    if response.status_code == 200:
        print(f"‚úÖ Usu√°rio {user_id} aprovado com sucesso!")
        return True
    else:
        print(f"‚ùå Erro ao aprovar usu√°rio {user_id}: {response.status_code}")
        print(f"Resposta: {response.text}")
        return False

def reprovar_usuario(token, user_id, motivo="Teste de reprova√ß√£o"):
    """Reprova um usu√°rio"""
    print(f"\n‚ùå Reprovando usu√°rio ID {user_id}...")
    
    headers = {"Authorization": f"Bearer {token}"}
    data = {"motivo": motivo}
    
    response = requests.put(f"{BASE_URL}/users/usuarios/{user_id}/reject", 
                          headers=headers, json=data)
    
    if response.status_code == 200:
        print(f"‚ùå Usu√°rio {user_id} reprovado com sucesso!")
        return True
    else:
        print(f"‚ùå Erro ao reprovar usu√°rio {user_id}: {response.status_code}")
        print(f"Resposta: {response.text}")
        return False

def main():
    print("üß™ TESTE DE APROVA√á√ÉO DE COLABORADORES")
    print("=" * 50)
    
    # 1. Fazer login
    token = fazer_login_admin()
    if not token:
        print("‚ùå N√£o foi poss√≠vel fazer login. Teste abortado.")
        return
    
    # 2. Buscar usu√°rios pendentes
    usuarios_pendentes = buscar_usuarios_pendentes(token)
    
    if not usuarios_pendentes:
        print("\n‚úÖ N√£o h√° usu√°rios pendentes para testar.")
        print("üí° Para testar, registre um novo usu√°rio primeiro.")
        return
    
    # 3. Testar aprova√ß√£o/reprova√ß√£o
    print("\nüîß OP√á√ïES DE TESTE:")
    print("1. Aprovar primeiro usu√°rio")
    print("2. Reprovar primeiro usu√°rio")
    print("3. Apenas visualizar (n√£o fazer altera√ß√µes)")
    
    try:
        opcao = input("\nEscolha uma op√ß√£o (1-3): ").strip()
        
        if opcao == "1":
            primeiro_usuario = usuarios_pendentes[0]
            aprovar_usuario(token, primeiro_usuario['id'])
            
        elif opcao == "2":
            primeiro_usuario = usuarios_pendentes[0]
            reprovar_usuario(token, primeiro_usuario['id'])
            
        elif opcao == "3":
            print("‚úÖ Teste conclu√≠do sem altera√ß√µes.")
            
        else:
            print("‚ùå Op√ß√£o inv√°lida.")
    
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Teste interrompido pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå Erro durante o teste: {e}")
    
    print("\nüèÅ Teste finalizado!")

if __name__ == "__main__":
    main()
