#!/usr/bin/env python3
"""
Script para verificar por que o usu√°rio alessandro.souza@data.com.br n√£o tem setor
"""

import sqlite3
import os
from datetime import datetime

# Caminho do banco de dados
db_path = r"C:\Users\Alessandro\OneDrive\Desktop\RegistroOS\RegistroOS\registrooficial\backend\registroos_new.db"

def verificar_usuario_alessandro():
    """Verificar dados do usu√°rio alessandro.souza@data.com.br"""
    print("üîç Verificando usu√°rio alessandro.souza@data.com.br...")
    
    if not os.path.exists(db_path):
        print(f"‚ùå Banco de dados n√£o encontrado: {db_path}")
        return
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # 1. Buscar o usu√°rio alessandro
        print("\nüìã 1. DADOS DO USU√ÅRIO:")
        cursor.execute("""
            SELECT id, email, nome_completo, primeiro_nome, privilege_level, 
                   id_setor, setor, id_departamento, departamento, trabalha_producao,
                   status, data_criacao
            FROM tipo_usuarios 
            WHERE email = 'alessandro.souza@data.com.br'
        """)
        
        usuario = cursor.fetchone()
        if usuario:
            print(f"   ‚úÖ Usu√°rio encontrado:")
            print(f"      ID: {usuario[0]}")
            print(f"      Email: {usuario[1]}")
            print(f"      Nome: {usuario[2]}")
            print(f"      Primeiro Nome: {usuario[3]}")
            print(f"      N√≠vel: {usuario[4]}")
            print(f"      ID Setor: {usuario[5]}")
            print(f"      Setor (string): {usuario[6]}")
            print(f"      ID Departamento: {usuario[7]}")
            print(f"      Departamento (string): {usuario[8]}")
            print(f"      Trabalha Produ√ß√£o: {usuario[9]}")
            print(f"      Status: {usuario[10]}")
            print(f"      Data Cria√ß√£o: {usuario[11]}")
            
            id_setor = usuario[5]
            id_departamento = usuario[7]
            
        else:
            print("   ‚ùå Usu√°rio n√£o encontrado!")
            return
        
        # 2. Verificar setores dispon√≠veis
        print("\nüè≠ 2. SETORES DISPON√çVEIS:")
        cursor.execute("""
            SELECT id, nome, departamento, id_departamento, ativo, descricao
            FROM tipo_setores 
            ORDER BY id
        """)
        
        setores = cursor.fetchall()
        print(f"   üìä Total de setores: {len(setores)}")
        
        for setor in setores:
            status_icon = "‚úÖ" if setor[4] else "‚ùå"
            print(f"      {status_icon} ID: {setor[0]} | Nome: {setor[1]} | Dept: {setor[2]} | ID_Dept: {setor[3]} | Ativo: {setor[4]}")
        
        # 3. Verificar departamentos dispon√≠veis
        print("\nüè¢ 3. DEPARTAMENTOS DISPON√çVEIS:")
        cursor.execute("""
            SELECT id, nome_tipo, descricao, ativo
            FROM tipo_departamentos 
            ORDER BY id
        """)
        
        departamentos = cursor.fetchall()
        print(f"   üìä Total de departamentos: {len(departamentos)}")
        
        for dept in departamentos:
            status_icon = "‚úÖ" if dept[3] else "‚ùå"
            print(f"      {status_icon} ID: {dept[0]} | Nome: {dept[1]} | Descri√ß√£o: {dept[2]} | Ativo: {dept[3]}")
        
        # 4. Verificar se o setor/departamento do usu√°rio existe
        if id_setor:
            print(f"\nüîç 4. VERIFICANDO SETOR DO USU√ÅRIO (ID: {id_setor}):")
            cursor.execute("""
                SELECT id, nome, departamento, ativo
                FROM tipo_setores 
                WHERE id = ?
            """, (id_setor,))
            
            setor_usuario = cursor.fetchone()
            if setor_usuario:
                print(f"   ‚úÖ Setor encontrado: {setor_usuario[1]} (Ativo: {setor_usuario[3]})")
            else:
                print(f"   ‚ùå Setor ID {id_setor} n√£o encontrado na tabela tipo_setores!")
        else:
            print("\n‚ö†Ô∏è 4. USU√ÅRIO N√ÉO TEM ID_SETOR DEFINIDO")
        
        if id_departamento:
            print(f"\nüîç 5. VERIFICANDO DEPARTAMENTO DO USU√ÅRIO (ID: {id_departamento}):")
            cursor.execute("""
                SELECT id, nome_tipo, ativo
                FROM tipo_departamentos 
                WHERE id = ?
            """, (id_departamento,))
            
            dept_usuario = cursor.fetchone()
            if dept_usuario:
                print(f"   ‚úÖ Departamento encontrado: {dept_usuario[1]} (Ativo: {dept_usuario[2]})")
            else:
                print(f"   ‚ùå Departamento ID {id_departamento} n√£o encontrado na tabela tipo_departamentos!")
        else:
            print("\n‚ö†Ô∏è 5. USU√ÅRIO N√ÉO TEM ID_DEPARTAMENTO DEFINIDO")
        
        # 6. Sugest√µes de corre√ß√£o
        print("\nüí° 6. SUGEST√ïES DE CORRE√á√ÉO:")
        
        if not id_setor and not id_departamento:
            print("   üîß PROBLEMA: Usu√°rio n√£o tem setor nem departamento definidos")
            print("   üìù SOLU√á√ÉO: Atualizar o usu√°rio com setor e departamento v√°lidos")
            
            # Sugerir setores ativos
            setores_ativos = [s for s in setores if s[4]]  # s[4] √© o campo 'ativo'
            if setores_ativos:
                print(f"   üéØ Setores ativos dispon√≠veis para atribuir:")
                for setor in setores_ativos[:3]:  # Mostrar apenas os 3 primeiros
                    print(f"      - ID: {setor[0]} | Nome: {setor[1]} | Departamento: {setor[2]}")
                
                # Gerar comando SQL para atualizar
                primeiro_setor = setores_ativos[0]
                print(f"\n   üîß COMANDO SQL PARA CORRIGIR:")
                print(f"   UPDATE tipo_usuarios SET")
                print(f"      id_setor = {primeiro_setor[0]},")
                print(f"      setor = '{primeiro_setor[1]}',")
                print(f"      id_departamento = {primeiro_setor[3]},")
                print(f"      departamento = '{primeiro_setor[2]}'")
                print(f"   WHERE email = 'alessandro.souza@data.com.br';")
        
        elif id_setor and not setor_usuario:
            print(f"   üîß PROBLEMA: Usu√°rio tem id_setor={id_setor} mas o setor n√£o existe")
            print("   üìù SOLU√á√ÉO: Atualizar com setor v√°lido ou criar o setor faltante")
        
        elif id_departamento and not dept_usuario:
            print(f"   üîß PROBLEMA: Usu√°rio tem id_departamento={id_departamento} mas o departamento n√£o existe")
            print("   üìù SOLU√á√ÉO: Atualizar com departamento v√°lido ou criar o departamento faltante")
        
        else:
            print("   ‚úÖ Usu√°rio parece ter setor e departamento v√°lidos")
            print("   üîç Verifique se o problema est√° no frontend ou na autentica√ß√£o")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar usu√°rio: {e}")

def corrigir_usuario_alessandro():
    """Corrigir o usu√°rio alessandro atribuindo um setor v√°lido"""
    print("\nüîß CORRIGINDO USU√ÅRIO ALESSANDRO...")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Buscar primeiro setor ativo
        cursor.execute("""
            SELECT id, nome, departamento, id_departamento
            FROM tipo_setores 
            WHERE ativo = 1
            ORDER BY id
            LIMIT 1
        """)
        
        setor = cursor.fetchone()
        if not setor:
            print("‚ùå Nenhum setor ativo encontrado!")
            return
        
        # Atualizar usu√°rio
        cursor.execute("""
            UPDATE tipo_usuarios SET
                id_setor = ?,
                setor = ?,
                id_departamento = ?,
                departamento = ?
            WHERE email = 'alessandro.souza@data.com.br'
        """, (setor[0], setor[1], setor[3], setor[2]))
        
        conn.commit()
        
        if cursor.rowcount > 0:
            print(f"‚úÖ Usu√°rio atualizado com sucesso!")
            print(f"   Setor: {setor[1]} (ID: {setor[0]})")
            print(f"   Departamento: {setor[2]} (ID: {setor[3]})")
        else:
            print("‚ùå Nenhum usu√°rio foi atualizado")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erro ao corrigir usu√°rio: {e}")

if __name__ == "__main__":
    verificar_usuario_alessandro()
    
    # Perguntar se quer corrigir
    resposta = input("\n‚ùì Deseja corrigir o usu√°rio automaticamente? (s/n): ").lower().strip()
    if resposta in ['s', 'sim', 'y', 'yes']:
        corrigir_usuario_alessandro()
        print("\nüîÑ Verificando novamente ap√≥s corre√ß√£o:")
        verificar_usuario_alessandro()
    else:
        print("‚úã Corre√ß√£o cancelada pelo usu√°rio")
