#!/usr/bin/env python3
"""
Script para corrigir todas as refer√™ncias aos campos removidos (setor, departamento)
nos arquivos Python do backend.
"""

import os
import re
import shutil
from datetime import datetime

def backup_file(file_path):
    """Cria backup do arquivo antes de modificar"""
    backup_path = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    shutil.copy2(file_path, backup_path)
    print(f"‚úÖ Backup criado: {backup_path}")
    return backup_path

def fix_file(file_path):
    """Corrige um arquivo espec√≠fico"""
    print(f"\nüîß Corrigindo: {file_path}")
    
    # Criar backup
    backup_file(file_path)
    
    # Ler arquivo
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    original_content = content
    
    # Substitui√ß√µes para campos de usu√°rio
    content = re.sub(r'\.setor(?!\w)', '.id_setor', content)
    content = re.sub(r'\.departamento(?!\w)', '.id_departamento', content)
    
    # Substitui√ß√µes para strings em dicion√°rios/JSON
    content = re.sub(r'"setor":\s*(\w+)\.setor', '"id_setor": \\1.id_setor', content)
    content = re.sub(r'"departamento":\s*(\w+)\.departamento', '"id_departamento": \\1.id_departamento', content)

    # Substitui√ß√µes espec√≠ficas para chaves de dicion√°rio
    content = re.sub(r'"setor":\s*(\w+)\.id_setor', '"id_setor": \\1.id_setor', content)
    content = re.sub(r'"departamento":\s*(\w+)\.id_departamento', '"id_departamento": \\1.id_departamento', content)
    
    # Substitui√ß√µes espec√≠ficas para queries SQL
    content = re.sub(r'SELECT.*setor.*departamento.*FROM tipo_usuarios', 
                    'SELECT id, nome_completo, id_setor, id_departamento, privilege_level FROM tipo_usuarios', content)
    
    # Substitui√ß√µes para filtros
    content = re.sub(r'\.filter\(.*\.setor\s*==', '.filter(Setor.id_setor ==', content)
    content = re.sub(r'\.filter\(.*\.departamento\s*==', '.filter(Departamento.id_departamento ==', content)
    
    # Verificar se houve mudan√ßas
    if content != original_content:
        # Salvar arquivo corrigido
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ Arquivo corrigido: {file_path}")
        return True
    else:
        print(f"‚ÑπÔ∏è Nenhuma corre√ß√£o necess√°ria: {file_path}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando corre√ß√£o de campos removidos...")
    
    # Diret√≥rio base do backend
    backend_dir = r"C:\Users\Alessandro\OneDrive\Desktop\RegistroOS\RegistroOS\registrooficial\backend"
    
    # Arquivos para corrigir
    files_to_fix = [
        "routes/auth.py",
        "routes/users.py", 
        "routes/catalogs_validated.py",
        "app/admin_routes_simple.py",
        "app/dependencies.py",
        "routes/pcp_routes.py",
        "app/gestao_routes.py",
        "routes/os_routes_simple.py"
    ]
    
    fixed_count = 0
    
    for file_rel_path in files_to_fix:
        file_path = os.path.join(backend_dir, file_rel_path)
        if os.path.exists(file_path):
            if fix_file(file_path):
                fixed_count += 1
        else:
            print(f"‚ùå Arquivo n√£o encontrado: {file_path}")
    
    print(f"\nüéâ Corre√ß√£o conclu√≠da! {fixed_count} arquivos foram modificados.")
    print("‚ö†Ô∏è Reinicie o servidor para aplicar as mudan√ßas.")

if __name__ == "__main__":
    main()
