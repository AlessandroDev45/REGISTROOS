#!/usr/bin/env python3
"""
Script para testar o endpoint /api/desenvolvimento/buscar-ids-os
Conforme HIERARQUIA_COMPLETA_BANCO_DADOS.md
"""

import requests
import json
import sys
import os

# Adicionar o diret√≥rio backend ao path
backend_dir = r"C:\Users\Alessandro\OneDrive\Desktop\RegistroOS\RegistroOS\registrooficial\backend"
sys.path.append(backend_dir)

def test_endpoint():
    """Testa o endpoint buscar-ids-os"""
    
    base_url = "http://localhost:8000"
    
    print("üîç Testando endpoint /api/desenvolvimento/buscar-ids-os")
    print("=" * 60)
    
    # 1. Testar se o servidor est√° rodando
    try:
        health_response = requests.get(f"{base_url}/health", timeout=5)
        print(f"‚úÖ Servidor rodando: {health_response.status_code}")
        print(f"   Resposta: {health_response.json()}")
    except Exception as e:
        print(f"‚ùå Servidor n√£o est√° rodando: {e}")
        return False
    
    # 2. Testar endpoint sem autentica√ß√£o (deve retornar 401)
    try:
        endpoint_url = f"{base_url}/api/desenvolvimento/buscar-ids-os"
        test_data = {"numeros_os": ["15225", "15226"]}
        
        response = requests.post(
            endpoint_url,
            json=test_data,
            timeout=10
        )
        
        print(f"\nüîê Teste sem autentica√ß√£o:")
        print(f"   Status: {response.status_code}")
        print(f"   Resposta: {response.text}")
        
        if response.status_code == 401:
            print("‚úÖ Endpoint encontrado (requer autentica√ß√£o)")
            return True
        elif response.status_code == 404:
            print("‚ùå Endpoint n√£o encontrado (404)")
            return False
        else:
            print(f"‚ö†Ô∏è Status inesperado: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao testar endpoint: {e}")
        return False

def test_with_mock_auth():
    """Testa com autentica√ß√£o simulada"""
    print(f"\nüîë Teste com autentica√ß√£o simulada:")
    
    # Simular login primeiro (se houver endpoint de login)
    try:
        login_url = "http://localhost:8000/api/auth/login"
        login_data = {
            "username": "admin",
            "password": "admin123"
        }
        
        session = requests.Session()
        login_response = session.post(login_url, json=login_data, timeout=10)
        
        print(f"   Login status: {login_response.status_code}")
        
        if login_response.status_code == 200:
            # Testar endpoint com sess√£o autenticada
            endpoint_url = "http://localhost:8000/api/desenvolvimento/buscar-ids-os"
            test_data = {"numeros_os": ["15225"]}
            
            response = session.post(endpoint_url, json=test_data, timeout=10)
            
            print(f"   Endpoint status: {response.status_code}")
            print(f"   Resposta: {response.text}")
            
            if response.status_code == 200:
                print("‚úÖ Endpoint funcionando com autentica√ß√£o!")
                return True
            else:
                print(f"‚ö†Ô∏è Endpoint com problema: {response.status_code}")
                return False
        else:
            print("‚ö†Ô∏è Login falhou, testando apenas conectividade")
            return False
            
    except Exception as e:
        print(f"‚ö†Ô∏è Erro no teste com autentica√ß√£o: {e}")
        return False

def check_routes():
    """Verifica todas as rotas dispon√≠veis"""
    try:
        docs_url = "http://localhost:8000/docs"
        print(f"\nüìã Documenta√ß√£o da API dispon√≠vel em: {docs_url}")
        
        # Tentar acessar OpenAPI spec
        openapi_url = "http://localhost:8000/openapi.json"
        response = requests.get(openapi_url, timeout=10)
        
        if response.status_code == 200:
            openapi_spec = response.json()
            paths = openapi_spec.get("paths", {})
            
            print(f"\nüìç Rotas encontradas:")
            for path in sorted(paths.keys()):
                if "desenvolvimento" in path:
                    methods = list(paths[path].keys())
                    print(f"   {path} [{', '.join(methods).upper()}]")
            
            # Verificar especificamente nosso endpoint
            target_path = "/api/desenvolvimento/buscar-ids-os"
            if target_path in paths:
                print(f"\n‚úÖ Endpoint {target_path} encontrado na documenta√ß√£o!")
                return True
            else:
                print(f"\n‚ùå Endpoint {target_path} N√ÉO encontrado na documenta√ß√£o")
                return False
        else:
            print(f"‚ö†Ô∏è N√£o foi poss√≠vel acessar OpenAPI spec: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar rotas: {e}")
        return False

if __name__ == "__main__":
    print("üß™ TESTE DO ENDPOINT BUSCAR-IDS-OS")
    print("Conforme HIERARQUIA_COMPLETA_BANCO_DADOS.md")
    print("=" * 60)
    
    # Executar testes
    server_ok = test_endpoint()
    routes_ok = check_routes()
    auth_ok = test_with_mock_auth()
    
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES:")
    print(f"   üñ•Ô∏è  Servidor rodando: {'‚úÖ' if server_ok else '‚ùå'}")
    print(f"   üìç Rotas corretas: {'‚úÖ' if routes_ok else '‚ùå'}")
    print(f"   üîê Autentica√ß√£o: {'‚úÖ' if auth_ok else '‚ö†Ô∏è'}")
    
    if server_ok and routes_ok:
        print("\nüéâ ENDPOINT EST√Å FUNCIONANDO!")
        print("   O problema pode ser apenas de autentica√ß√£o no frontend.")
    else:
        print("\n‚ùå ENDPOINT COM PROBLEMAS")
        print("   Verifique a configura√ß√£o do backend.")
