#!/usr/bin/env python3
"""
Teste direto do scraping sem passar pelo endpoint
"""

import sys
import os
from pathlib import Path

# Adicionar o caminho do backend ao sys.path
backend_path = Path(__file__).parent.parent / "RegistroOS" / "registrooficial" / "backend"
sys.path.append(str(backend_path))

def testar_scraping_direto():
    """Testa o scraping diretamente"""
    
    print("üöÄ TESTE DIRETO DO SCRAPING")
    print("=" * 50)
    
    try:
        # Importar o m√≥dulo de scraping
        script_path = backend_path / "scripts" / "scrape_os_data.py"
        print(f"üìÅ Caminho do script: {script_path}")
        print(f"üìÅ Script existe: {script_path.exists()}")
        
        if not script_path.exists():
            print("‚ùå Script n√£o encontrado!")
            return False
        
        # Adicionar o diret√≥rio scripts ao path
        scripts_dir = str(script_path.parent)
        if scripts_dir not in sys.path:
            sys.path.append(scripts_dir)
        
        print("üì¶ Importando m√≥dulo de scraping...")
        import importlib.util
        spec = importlib.util.spec_from_file_location("scrape_os_data", script_path)
        scrape_module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(scrape_module)
        print("‚úÖ M√≥dulo importado com sucesso!")
        
        # Testar com OS 12345
        numero_os = "12345"
        print(f"\nüöÄ Executando scraping para OS: {numero_os}")
        print("‚è≥ AGUARDE... O scraping pode demorar alguns minutos...")
        print("üìã Monitore o Chrome que ser√° aberto...")
        
        # Executar scraping
        scraped_data = scrape_module.execute_scraping(numero_os)
        
        print(f"\nüìä RESULTADO DO SCRAPING:")
        print(f"   - Dados retornados: {len(scraped_data) if scraped_data else 0} registros")
        
        if scraped_data and len(scraped_data) > 0:
            print("üéâ SCRAPING FUNCIONOU!")
            
            # Mostrar dados principais
            for i, os_data in enumerate(scraped_data):
                print(f"\nüìã OS {i+1}:")
                print(f"   - N√∫mero: {os_data.get('NUMERO_OS', 'N/A')}")
                print(f"   - Cliente: {os_data.get('CLIENTE', 'N/A')}")
                print(f"   - Equipamento: {os_data.get('EQUIPAMENTO', 'N/A')}")
                print(f"   - Status: {os_data.get('STATUS', 'N/A')}")
                print(f"   - Pot√™ncia: {os_data.get('POTENCIA', 'N/A')}")
                print(f"   - Tens√£o: {os_data.get('TENSAO', 'N/A')}")
                print(f"   - Classifica√ß√£o: {os_data.get('CLASSIFICACAO DO EQUIPAMENTO', 'N/A')}")
                
                # Mostrar todos os campos dispon√≠veis
                print(f"   - Total de campos: {len(os_data)}")
                print(f"   - Campos: {list(os_data.keys())}")
            
            return True
        else:
            print("‚ùå SCRAPING N√ÉO RETORNOU DADOS")
            print("   Poss√≠veis causas:")
            print("   - OS n√£o existe no sistema")
            print("   - Problema de conex√£o")
            print("   - Mudan√ßa na estrutura do site")
            return False
            
    except Exception as e:
        print(f"‚ùå ERRO NO SCRAPING: {e}")
        print(f"üîç Tipo do erro: {type(e)}")
        
        # Stack trace completo
        import traceback
        print(f"\nüìã Stack trace completo:")
        traceback.print_exc()
        return False

def main():
    """Fun√ß√£o principal"""
    print("üß™ TESTE DIRETO DO SCRAPING")
    print("=" * 60)
    
    print("üìã ESTE TESTE VAI:")
    print("   1. Importar o m√≥dulo de scraping diretamente")
    print("   2. Executar o scraping da OS 12345")
    print("   3. Mostrar os dados retornados")
    print("   4. Confirmar se o scraping funciona")
    
    print("\n‚ö†Ô∏è IMPORTANTE:")
    print("   - O Chrome ser√° aberto em modo headless")
    print("   - O processo pode demorar alguns minutos")
    print("   - Certifique-se de que tem conex√£o com a internet")
    
    input("\n‚è∏Ô∏è Pressione ENTER para continuar...")
    
    sucesso = testar_scraping_direto()
    
    print("\n" + "=" * 60)
    print("üìä RESULTADO FINAL:")
    if sucesso:
        print("üéâ SCRAPING FUNCIONA PERFEITAMENTE!")
        print("   O problema n√£o √© o scraping em si")
        print("   O problema pode ser:")
        print("   - Timeout do endpoint")
        print("   - Reinicializa√ß√£o do servidor")
        print("   - Configura√ß√£o do frontend")
    else:
        print("‚ùå SCRAPING TEM PROBLEMAS!")
        print("   Verifique:")
        print("   - Arquivo .env")
        print("   - Conex√£o com internet")
        print("   - ChromeDriver")
        print("   - Credenciais de login")

if __name__ == "__main__":
    main()
