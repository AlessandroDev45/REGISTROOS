#!/usr/bin/env python3
"""
Teste com a URL correta do endpoint
"""

import requests
import json

def fazer_login():
    """Faz login no sistema"""
    session = requests.Session()
    
    credenciais = [
        {"username": "admin@registroos.com", "password": "admin123"},
        {"username": "user.pcp@registroos.com", "password": "123456"},
    ]
    
    for cred in credenciais:
        try:
            print(f"üîê Tentando login: {cred['username']}")
            response = session.post("http://localhost:8000/api/login", json=cred, timeout=10)
            if response.status_code == 200:
                print(f"‚úÖ Login OK: {cred['username']}")
                return session
            else:
                print(f"‚ùå Login falhou: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erro no login: {e}")
            continue
    
    return None

def testar_endpoint_correto():
    """Testa o endpoint com a URL correta"""
    
    print("üöÄ TESTE COM URL CORRETA")
    print("=" * 40)
    
    # 1. Fazer login
    print("\n1Ô∏è‚É£ FAZENDO LOGIN...")
    session = fazer_login()
    if not session:
        print("‚ùå Teste interrompido - sem login")
        return False
    
    # 2. Testar endpoint com URL correta
    print("\n2Ô∏è‚É£ TESTANDO ENDPOINT COM URL CORRETA...")
    try:
        # URL correta baseada na documenta√ß√£o OpenAPI
        url = "http://localhost:8000/api/formulario/os/12345"
        print(f"üîç URL: {url}")
        
        response = session.get(url, timeout=180)  # 3 minutos para scraping
        
        print(f"üìä Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("üéâ SUCESSO! Dados retornados:")
            print(f"   - ID: {data.get('id')}")
            print(f"   - N√∫mero: {data.get('numero_os')}")
            print(f"   - Cliente: {data.get('cliente')}")
            print(f"   - Equipamento: {data.get('equipamento')}")
            print(f"   - Status: {data.get('status')}")
            print(f"   - Fonte: {data.get('fonte', 'banco')}")
            
            if data.get('fonte') == 'scraping':
                print("\nüéØ SCRAPING FUNCIONOU!")
                print("   A OS foi criada automaticamente via scraping")
            elif data.get('fonte') == 'banco':
                print("\nüìã OS ENCONTRADA NO BANCO")
                print("   A OS j√° existia no banco de dados")
            
            return True
            
        elif response.status_code == 404:
            try:
                error_data = response.json()
                error_msg = error_data.get('detail', 'Erro desconhecido')
                print(f"‚ùå OS n√£o encontrada: {error_msg}")
                
                if "‚ö†Ô∏è OS n√£o cadastrada na base de dados" in error_msg:
                    print("‚úÖ Mensagem de erro CORRETA!")
                    if "AGUARDE CONSULTA VIA WEB" in error_msg:
                        print("   Tipo: AGUARDE CONSULTA VIA WEB")
                    elif "Voc√™ pode preencher os campos manualmente" in error_msg:
                        print("   Tipo: Preencher manualmente")
                else:
                    print("‚ö†Ô∏è Mensagem de erro diferente do esperado")
                
            except:
                print(f"‚ùå Erro 404: {response.text[:200]}")
            return False
            
        else:
            print(f"‚ùå Erro HTTP {response.status_code}")
            try:
                error_data = response.json()
                print(f"   Detalhes: {error_data.get('detail', 'Sem detalhes')}")
            except:
                print(f"   Resposta: {response.text[:200]}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚è∞ TIMEOUT - Requisi√ß√£o demorou mais de 3 minutos")
        print("   Isso pode indicar que o scraping est√° rodando")
        return False
        
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üß™ TESTE COM URL CORRETA DO ENDPOINT")
    print("=" * 50)
    
    sucesso = testar_endpoint_correto()
    
    print("\n" + "=" * 50)
    print("üìä RESULTADO FINAL:")
    if sucesso:
        print("üéâ ENDPOINT FUNCIONANDO!")
        print("   A URL correta √©: /api/formulario/os/{numero_os}")
        print("   O scraping autom√°tico est√° funcionando")
    else:
        print("‚ùå ENDPOINT COM PROBLEMAS")
        print("   Verifique:")
        print("   - Se o scraping est√° configurado")
        print("   - Se o arquivo .env existe")
        print("   - Os logs do backend para mais detalhes")

if __name__ == "__main__":
    main()
