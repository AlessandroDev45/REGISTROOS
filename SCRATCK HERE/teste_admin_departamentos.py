#!/usr/bin/env python3
"""
Teste para verificar se os endpoints de departamentos est√£o funcionando
corretamente ap√≥s a corre√ß√£o do erro 405.
"""

import requests
import json
import sys

def testar_endpoints_departamentos():
    """Testa os endpoints de departamentos"""
    
    base_url = "http://localhost:8000/api/admin/config"
    
    print("üß™ TESTE DOS ENDPOINTS DE DEPARTAMENTOS")
    print("=" * 50)
    
    # Dados de teste
    departamento_teste = {
        "nome_tipo": "TESTE DEPARTAMENTO",
        "descricao": "Departamento criado para teste",
        "ativo": True
    }
    
    # 1. Testar GET /departamentos (sem autentica√ß√£o - deve falhar)
    print("\n1Ô∏è‚É£ Testando GET /departamentos (sem auth):")
    try:
        response = requests.get(f"{base_url}/departamentos")
        print(f"   Status: {response.status_code}")
        if response.status_code == 401:
            print("   ‚úÖ Autentica√ß√£o requerida (esperado)")
        else:
            print(f"   ‚ùå Resposta inesperada: {response.text}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    # 2. Testar POST /departamentos (sem autentica√ß√£o - deve falhar)
    print("\n2Ô∏è‚É£ Testando POST /departamentos (sem auth):")
    try:
        response = requests.post(f"{base_url}/departamentos", json=departamento_teste)
        print(f"   Status: {response.status_code}")
        if response.status_code == 401:
            print("   ‚úÖ Autentica√ß√£o requerida (esperado)")
        else:
            print(f"   ‚ùå Resposta inesperada: {response.text}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    # 3. Verificar se os endpoints est√£o registrados
    print("\n3Ô∏è‚É£ Verificando documenta√ß√£o da API:")
    try:
        response = requests.get("http://localhost:8000/openapi.json")
        if response.status_code == 200:
            openapi_spec = response.json()
            paths = openapi_spec.get("paths", {})
            
            endpoints_departamentos = [
                "/api/admin/config/departamentos",
                "/api/admin/config/departamentos/{departamento_id}"
            ]
            
            for endpoint in endpoints_departamentos:
                if endpoint in paths:
                    methods = list(paths[endpoint].keys())
                    print(f"   ‚úÖ {endpoint}: {methods}")
                else:
                    print(f"   ‚ùå {endpoint}: N√ÉO ENCONTRADO")
        else:
            print(f"   ‚ùå Erro ao buscar OpenAPI spec: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    # 4. Verificar se o servidor est√° respondendo
    print("\n4Ô∏è‚É£ Verificando sa√∫de do servidor:")
    try:
        response = requests.get("http://localhost:8000/health")
        if response.status_code == 200:
            print(f"   ‚úÖ Servidor saud√°vel: {response.json()}")
        else:
            print(f"   ‚ùå Problema no servidor: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    print("\nüìä RESUMO:")
    print("- Os endpoints de departamentos foram adicionados ao backend")
    print("- Autentica√ß√£o est√° funcionando (401 para requests sem auth)")
    print("- Para testar completamente, √© necess√°rio fazer login no frontend")
    print("- O erro 405 (Method Not Allowed) deve estar resolvido")
    
    print("\nüîß PR√ìXIMOS PASSOS:")
    print("1. Fa√ßa login no frontend (http://localhost:3001/admin)")
    print("2. V√° para a aba 'Departamentos'")
    print("3. Tente criar um novo departamento")
    print("4. O erro 405 n√£o deve mais aparecer")

def main():
    """Fun√ß√£o principal"""
    testar_endpoints_departamentos()

if __name__ == "__main__":
    main()
