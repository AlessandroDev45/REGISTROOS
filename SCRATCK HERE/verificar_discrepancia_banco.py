#!/usr/bin/env python3
"""
VERIFICAR DISCREP√ÇNCIA NO BANCO
==============================

Verificar por que h√° diferen√ßa entre teste direto e endpoint.
"""

import sqlite3
import requests

# Configura√ß√£o
BASE_URL = "http://127.0.0.1:8000"
LOGIN_URL = f"{BASE_URL}/api/login"
ADMIN_USER = {"username": "admin@registroos.com", "password": "123456"}

def verificar_banco_direto():
    """Verificar banco diretamente"""
    print("üîç Verificando banco diretamente...")
    
    db_path = "C:/Users/Alessandro/OneDrive/Desktop/RegistroOS/RegistroOS/registrooficial/backend/registroos_new.db"
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Verificar todas as programa√ß√µes
        cursor.execute("SELECT id, responsavel_id, status FROM programacoes ORDER BY id DESC LIMIT 10")
        all_progs = cursor.fetchall()
        
        print(f"üìã √öltimas 10 programa√ß√µes:")
        for prog in all_progs:
            print(f"   ID {prog[0]}: responsavel_id={prog[1]}, status={prog[2]}")
        
        # Verificar especificamente user_id = 1
        cursor.execute("SELECT COUNT(*) FROM programacoes WHERE responsavel_id = 1")
        count_1 = cursor.fetchone()[0]
        
        cursor.execute("SELECT id, status FROM programacoes WHERE responsavel_id = 1")
        progs_1 = cursor.fetchall()
        
        print(f"\nüìä Programa√ß√µes para responsavel_id=1: {count_1}")
        for prog in progs_1:
            print(f"   ID {prog[0]}: status={prog[1]}")
        
        # Verificar se h√° diferen√ßa de tipos
        cursor.execute("SELECT DISTINCT typeof(responsavel_id) FROM programacoes")
        types = cursor.fetchall()
        print(f"\nüîç Tipos de responsavel_id no banco: {types}")
        
        # Verificar valores NULL
        cursor.execute("SELECT COUNT(*) FROM programacoes WHERE responsavel_id IS NULL")
        null_count = cursor.fetchone()[0]
        print(f"üìä Programa√ß√µes com responsavel_id NULL: {null_count}")
        
        conn.close()
        return count_1
        
    except Exception as e:
        print(f"‚ùå Erro no banco: {e}")
        return 0

def verificar_endpoint():
    """Verificar via endpoint"""
    print("\nüîç Verificando via endpoint...")
    
    session = requests.Session()
    
    # Login
    response = session.post(LOGIN_URL, json=ADMIN_USER)
    if response.status_code != 200:
        print("‚ùå Erro no login")
        return 0
    
    # Testar endpoint
    response = session.get(f"{BASE_URL}/api/desenvolvimento/minhas-programacoes-v2")
    if response.status_code == 200:
        data = response.json()
        print(f"üìä Resposta do endpoint: {data}")
        return data.get('count', 0)
    else:
        print(f"‚ùå Erro no endpoint: {response.status_code}")
        return 0

def verificar_usuario_logado():
    """Verificar qual usu√°rio est√° logado"""
    print("\nüîç Verificando usu√°rio logado...")
    
    session = requests.Session()
    
    # Login
    response = session.post(LOGIN_URL, json=ADMIN_USER)
    if response.status_code != 200:
        print("‚ùå Erro no login")
        return
    
    # Verificar usu√°rio
    response = session.get(f"{BASE_URL}/api/desenvolvimento/test-programacoes")
    if response.status_code == 200:
        data = response.json()
        print(f"üë§ Usu√°rio logado: {data}")
    else:
        print(f"‚ùå Erro: {response.status_code}")

def main():
    """Fun√ß√£o principal"""
    print("üîß VERIFICAR DISCREP√ÇNCIA NO BANCO")
    print("=" * 40)
    
    # 1. Verificar banco direto
    count_banco = verificar_banco_direto()
    
    # 2. Verificar usu√°rio logado
    verificar_usuario_logado()
    
    # 3. Verificar endpoint
    count_endpoint = verificar_endpoint()
    
    # 4. Comparar
    print(f"\nüìä COMPARA√á√ÉO:")
    print(f"   Banco direto: {count_banco} programa√ß√µes")
    print(f"   Endpoint: {count_endpoint} programa√ß√µes")
    
    if count_banco != count_endpoint:
        print("\n‚ö†Ô∏è DISCREP√ÇNCIA DETECTADA!")
        print("   Poss√≠veis causas:")
        print("   1. Usu√°rio logado diferente do esperado")
        print("   2. Banco de dados diferente")
        print("   3. Problema de tipos de dados")
        print("   4. Transa√ß√£o n√£o commitada")
    else:
        print("\n‚úÖ Dados consistentes")

if __name__ == "__main__":
    main()
