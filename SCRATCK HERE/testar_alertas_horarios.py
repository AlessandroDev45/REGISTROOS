#!/usr/bin/env python3
"""
TESTAR ALERTAS E HOR√ÅRIOS
=========================

Testar problemas espec√≠ficos de alertas e hor√°rios divergentes.
"""

import requests
import json
from datetime import datetime, timedelta

# Configura√ß√£o
BASE_URL = "http://127.0.0.1:8000"
LOGIN_URL = f"{BASE_URL}/api/login"

# Usu√°rios
ADMIN_USER = {"username": "admin@registroos.com", "password": "123456"}
SUPERVISOR_LAB = {"username": "supervisor.laboratorio_de_ensaios_eletricos@registroos.com", "password": "123456"}
USER_LAB = {"username": "user.laboratorio_de_ensaios_eletricos@registroos.com", "password": "123456"}

def fazer_login(usuario, nome_usuario):
    """Fazer login e obter sess√£o"""
    print(f"üîê Fazendo login como {nome_usuario}...")
    
    session = requests.Session()
    headers = {"Content-Type": "application/json"}
    
    response = session.post(LOGIN_URL, json=usuario, headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        user_info = data.get('user', {})
        print(f"‚úÖ Login realizado! {user_info.get('nome_completo', 'N/A')} (ID: {user_info.get('id', 'N/A')})")
        return session, user_info
    else:
        print(f"‚ùå Erro no login: {response.status_code}")
        return None, None

def criar_programacao_com_horarios_especificos(session):
    """Criar programa√ß√£o com hor√°rios espec√≠ficos (4.4h)"""
    print(f"\nüìã Criando programa√ß√£o com 4.4h espec√≠ficas...")
    
    # Hor√°rios espec√≠ficos: 10:30 AM por 4h24min
    agora = datetime.now()
    inicio = agora.replace(hour=10, minute=30, second=0, microsecond=0)
    fim = inicio + timedelta(hours=4, minutes=24)  # 4.4 horas
    
    dados_programacao = {
        "id_ordem_servico": 1,
        "inicio_previsto": inicio.isoformat(),
        "fim_previsto": fim.isoformat(),
        "observacoes": "Programa√ß√£o OS 000012345 - 4.4h - TESTES INICIAIS, TESTES ARMADURA",
        "id_setor": None,
        "prioridade": "ALTA"
    }
    
    print(f"‚è∞ Hor√°rios programados:")
    print(f"   In√≠cio: {inicio.strftime('%d/%m/%Y %H:%M')}")
    print(f"   Fim: {fim.strftime('%d/%m/%Y %H:%M')}")
    print(f"   Dura√ß√£o: 4h24min (4.4h)")
    
    try:
        response = session.post(f"{BASE_URL}/api/pcp/programacoes", json=dados_programacao)
        
        if response.status_code == 200:
            data = response.json()
            prog_id = data.get('id')
            print(f"‚úÖ Programa√ß√£o criada! ID: {prog_id}")
            return prog_id, inicio, fim
        else:
            print(f"‚ùå Erro ao criar programa√ß√£o: {response.status_code}")
            return None, None, None
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return None, None, None

def verificar_alertas_supervisor(session):
    """Verificar se h√° alertas para supervisor"""
    print(f"\nüîî Verificando alertas para supervisor...")
    
    try:
        # Verificar se h√° endpoint de alertas/notifica√ß√µes
        response = session.get(f"{BASE_URL}/api/alertas")
        
        if response.status_code == 200:
            data = response.json()
            print(f"üì¢ Supervisor tem {len(data)} alertas")
            return data
        elif response.status_code == 404:
            print(f"‚ö†Ô∏è Endpoint de alertas n√£o existe")
            return []
        else:
            print(f"‚ùå Erro ao buscar alertas: {response.status_code}")
            return []
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return []

def reatribuir_com_horarios_corretos(session, prog_id, inicio_original, fim_original):
    """Reatribuir mantendo hor√°rios originais"""
    print(f"\nüîÑ Reatribuindo com hor√°rios corretos...")
    
    print(f"‚è∞ Hor√°rios que DEVERIAM ser mantidos:")
    print(f"   In√≠cio: {inicio_original.strftime('%d/%m/%Y %H:%M')}")
    print(f"   Fim: {fim_original.strftime('%d/%m/%Y %H:%M')}")
    
    dados_reatribuicao = {
        "responsavel_id": 2,  # ID do usu√°rio laborat√≥rio
        "setor_destino": "LABORATORIO DE ENSAIOS ELETRICOS",
        "departamento_destino": "TRANSFORMADORES",
        "data_inicio": inicio_original.isoformat(),  # Manter hor√°rio original
        "data_fim": fim_original.isoformat(),        # Manter hor√°rio original
        "observacoes": "TESTES INICIAIS, TESTES ARMADURA - Hor√°rios mantidos"
    }
    
    try:
        response = session.patch(f"{BASE_URL}/api/pcp/programacoes/{prog_id}/reatribuir", json=dados_reatribuicao)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Programa√ß√£o reatribu√≠da!")
            print(f"   ID: {data.get('id')}")
            print(f"   Novo respons√°vel: {data.get('novo_responsavel_id')}")
            return True
        else:
            print(f"‚ùå Erro ao reatribuir: {response.status_code}")
            print(f"Resposta: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def verificar_horarios_dashboard(session):
    """Verificar se hor√°rios est√£o corretos no dashboard"""
    print(f"\nüìä Verificando hor√°rios no dashboard...")
    
    try:
        response = session.get(f"{BASE_URL}/api/desenvolvimento/minhas-programacoes")
        
        if response.status_code == 200:
            data = response.json()
            
            if len(data) > 0:
                prog = data[0]  # Primeira programa√ß√£o
                inicio = prog.get('inicio_previsto')
                fim = prog.get('fim_previsto')
                
                print(f"‚è∞ Hor√°rios no dashboard:")
                print(f"   In√≠cio: {inicio}")
                print(f"   Fim: {fim}")
                
                if inicio and fim:
                    inicio_dt = datetime.fromisoformat(inicio.replace('Z', ''))
                    fim_dt = datetime.fromisoformat(fim.replace('Z', ''))
                    duracao = fim_dt - inicio_dt
                    
                    print(f"   Dura√ß√£o: {duracao}")
                    
                    # Verificar se dura√ß√£o √© aproximadamente 4.4h
                    duracao_horas = duracao.total_seconds() / 3600
                    print(f"   Dura√ß√£o em horas: {duracao_horas:.2f}h")
                    
                    if abs(duracao_horas - 4.4) < 0.1:  # Toler√¢ncia de 6 minutos
                        print(f"‚úÖ Hor√°rios corretos (4.4h)")
                        return True
                    else:
                        print(f"‚ùå Hor√°rios incorretos (deveria ser 4.4h)")
                        return False
                else:
                    print(f"‚ùå Hor√°rios n√£o encontrados")
                    return False
            else:
                print(f"‚ùå Nenhuma programa√ß√£o no dashboard")
                return False
                
        else:
            print(f"‚ùå Erro no dashboard: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def verificar_alertas_usuario(session):
    """Verificar se h√° alertas para usu√°rio"""
    print(f"\nüîî Verificando alertas para usu√°rio...")
    
    try:
        # Verificar se h√° endpoint de alertas/notifica√ß√µes
        response = session.get(f"{BASE_URL}/api/alertas")
        
        if response.status_code == 200:
            data = response.json()
            print(f"üì¢ Usu√°rio tem {len(data)} alertas")
            return data
        elif response.status_code == 404:
            print(f"‚ö†Ô∏è Endpoint de alertas n√£o existe")
            return []
        else:
            print(f"‚ùå Erro ao buscar alertas: {response.status_code}")
            return []
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return []

def main():
    """Fun√ß√£o principal"""
    print("üîß TESTAR ALERTAS E HOR√ÅRIOS")
    print("=" * 35)
    
    # 1. PCP cria programa√ß√£o com hor√°rios espec√≠ficos
    session_admin, admin_info = fazer_login(ADMIN_USER, "ADMIN/PCP")
    if not session_admin:
        return
    
    prog_id, inicio_original, fim_original = criar_programacao_com_horarios_especificos(session_admin)
    if not prog_id:
        return
    
    # 2. Supervisor verifica alertas
    session_supervisor, supervisor_info = fazer_login(SUPERVISOR_LAB, "SUPERVISOR LAB")
    if not session_supervisor:
        return
    
    alertas_supervisor = verificar_alertas_supervisor(session_supervisor)
    
    # 3. Supervisor reatribui mantendo hor√°rios
    reatribuicao_ok = reatribuir_com_horarios_corretos(session_supervisor, prog_id, inicio_original, fim_original)
    
    # 4. Usu√°rio verifica alertas
    session_user, user_info = fazer_login(USER_LAB, "USU√ÅRIO LAB")
    if not session_user:
        return
    
    alertas_usuario = verificar_alertas_usuario(session_user)
    
    # 5. Usu√°rio verifica hor√°rios no dashboard
    horarios_corretos = verificar_horarios_dashboard(session_user)
    
    # 6. Relat√≥rio final
    print(f"\nüìä RELAT√ìRIO FINAL:")
    print(f"   1. Programa√ß√£o criada com 4.4h: ‚úÖ")
    print(f"   2. Alertas para supervisor: {'‚úÖ' if len(alertas_supervisor) > 0 else '‚ùå (n√£o implementado)'}")
    print(f"   3. Reatribui√ß√£o funcionou: {'‚úÖ' if reatribuicao_ok else '‚ùå'}")
    print(f"   4. Alertas para usu√°rio: {'‚úÖ' if len(alertas_usuario) > 0 else '‚ùå (n√£o implementado)'}")
    print(f"   5. Hor√°rios corretos no dashboard: {'‚úÖ' if horarios_corretos else '‚ùå'}")
    
    print(f"\nüí° PR√ìXIMOS PASSOS:")
    if len(alertas_supervisor) == 0:
        print(f"   - Implementar sistema de alertas para supervisores")
    if len(alertas_usuario) == 0:
        print(f"   - Implementar sistema de alertas para usu√°rios")
    if not horarios_corretos:
        print(f"   - Corrigir preserva√ß√£o de hor√°rios na reatribui√ß√£o")

if __name__ == "__main__":
    main()
