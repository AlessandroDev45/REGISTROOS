#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para criar e testar uma nova programa√ß√£o para o setor TESTES
"""

import sys
import os
from datetime import datetime, timedelta
import json

# Adicionar o caminho do backend ao sys.path
backend_path = os.path.join(os.path.dirname(__file__), '..', 'RegistroOS', 'registrooficial', 'backend')
sys.path.append(backend_path)

from sqlalchemy.orm import sessionmaker
from sqlalchemy import text
from config.database_config import engine
from app.database_models import Departamento, Setor, TipoMaquina, TipoTeste

# Criar sess√£o
Session = sessionmaker(bind=engine)
session = Session()

def obter_dados_hierarquia():
    """Obt√©m dados da hierarquia TESTE"""
    print("üìä Obtendo dados da hierarquia TESTE...")
    
    # Buscar departamento
    departamento = session.query(Departamento).filter_by(nome_tipo="TESTE").first()
    if not departamento:
        print("   ‚ùå Departamento TESTE n√£o encontrado")
        return None
    
    # Buscar setor
    setor = session.query(Setor).filter_by(departamento="TESTE").first()
    if not setor:
        print("   ‚ùå Setor TESTES n√£o encontrado")
        return None
    
    # Buscar tipos de m√°quina
    tipos_maquina = session.query(TipoMaquina).filter_by(departamento="TESTE").all()
    
    # Buscar tipos de teste
    tipos_teste = session.query(TipoTeste).filter_by(departamento="TESTE").all()
    
    dados = {
        'departamento': departamento,
        'setor': setor,
        'tipos_maquina': tipos_maquina,
        'tipos_teste': tipos_teste
    }
    
    print(f"   ‚úÖ Dados obtidos:")
    print(f"      üè¢ Departamento: {departamento.nome_tipo} (ID: {departamento.id})")
    print(f"      üè≠ Setor: {setor.nome} (ID: {setor.id})")
    print(f"      üîß Tipos de M√°quina: {len(tipos_maquina)}")
    print(f"      üß™ Tipos de Teste: {len(tipos_teste)}")
    
    return dados

def criar_nova_programacao_avancada(dados):
    """Cria uma nova programa√ß√£o avan√ßada"""
    print("\nüìÖ Criando nova programa√ß√£o avan√ßada...")
    
    # Data base para a programa√ß√£o (pr√≥xima semana)
    data_base = datetime.now().date()
    data_inicio = data_base + timedelta(days=14)  # 2 semanas no futuro
    data_fim = data_inicio + timedelta(days=5)    # 5 dias de dura√ß√£o
    
    # Selecionar todos os tipos de teste para uma bateria completa
    testes_selecionados = []
    for teste in dados['tipos_teste']:
        testes_selecionados.append({
            "id": teste.id,
            "nome": teste.nome,
            "tipo": teste.tipo_teste,
            "categoria": teste.categoria,
            "descricao": teste.descricao
        })
    
    # Dados da nova programa√ß√£o
    nova_programacao = {
        "codigo_programacao": "PROG_TESTE_005",
        "titulo": "Bateria Completa de Valida√ß√£o - Todos Equipamentos",
        "descricao": "Programa√ß√£o avan√ßada para valida√ß√£o completa de todos os equipamentos do departamento TESTE com bateria completa de testes",
        "id_departamento": dados['departamento'].id,
        "id_setor": dados['setor'].id,
        "id_tipo_maquina": dados['tipos_maquina'][0].id,  # Usar primeiro equipamento como refer√™ncia
        "data_inicio_programada": data_inicio,
        "hora_inicio_programada": "07:00:00",
        "data_fim_programada": data_fim,
        "hora_fim_programada": "18:00:00",
        "status": "PROGRAMADO",
        "prioridade": "URGENTE",
        "id_responsavel_programacao": 1,  # Admin
        "id_responsavel_execucao": 1,     # Admin
        "testes_programados": json.dumps(testes_selecionados, ensure_ascii=False),
        "observacoes_programacao": "Programa√ß√£o cr√≠tica para valida√ß√£o completa de todos os equipamentos. Inclui todos os tipos de teste dispon√≠veis: funcional, performance, seguran√ßa, durabilidade e calibra√ß√£o.",
        "criado_por": 1,
        "data_criacao": datetime.now(),
        "data_ultima_atualizacao": datetime.now()
    }
    
    try:
        # Verificar se j√° existe
        query_check = text("SELECT id FROM programacao_testes WHERE codigo_programacao = :codigo")
        result = session.execute(query_check, {"codigo": nova_programacao["codigo_programacao"]}).fetchone()
        
        if result:
            print(f"   ‚ö†Ô∏è Programa√ß√£o {nova_programacao['codigo_programacao']} j√° existe")
            return result[0]
        
        # Inserir nova programa√ß√£o
        insert_query = text("""
            INSERT INTO programacao_testes (
                codigo_programacao, titulo, descricao, id_departamento, id_setor, 
                id_tipo_maquina, data_inicio_programada, hora_inicio_programada,
                data_fim_programada, hora_fim_programada, status, prioridade,
                id_responsavel_programacao, id_responsavel_execucao, testes_programados,
                observacoes_programacao, criado_por, data_criacao, data_ultima_atualizacao
            ) VALUES (
                :codigo_programacao, :titulo, :descricao, :id_departamento, :id_setor,
                :id_tipo_maquina, :data_inicio_programada, :hora_inicio_programada,
                :data_fim_programada, :hora_fim_programada, :status, :prioridade,
                :id_responsavel_programacao, :id_responsavel_execucao, :testes_programados,
                :observacoes_programacao, :criado_por, :data_criacao, :data_ultima_atualizacao
            )
        """)
        
        session.execute(insert_query, nova_programacao)
        session.commit()
        
        # Buscar ID da programa√ß√£o criada
        result = session.execute(query_check, {"codigo": nova_programacao["codigo_programacao"]}).fetchone()
        programacao_id = result[0] if result else None
        
        print(f"   ‚úÖ Nova programa√ß√£o criada:")
        print(f"      üìÖ C√≥digo: {nova_programacao['codigo_programacao']}")
        print(f"      üìã T√≠tulo: {nova_programacao['titulo']}")
        print(f"      üéØ Prioridade: {nova_programacao['prioridade']}")
        print(f"      üìÖ Per√≠odo: {data_inicio} a {data_fim}")
        print(f"      üß™ Testes: {len(testes_selecionados)} programados")
        print(f"      üÜî ID: {programacao_id}")
        
        return programacao_id
        
    except Exception as e:
        session.rollback()
        print(f"   ‚ùå Erro ao criar programa√ß√£o: {e}")
        return None

def testar_programacao_criada(programacao_id):
    """Testa a programa√ß√£o criada"""
    print(f"\nüß™ Testando programa√ß√£o criada (ID: {programacao_id})...")
    
    try:
        # Buscar programa√ß√£o
        query = text("""
            SELECT 
                pt.id, pt.codigo_programacao, pt.titulo, pt.descricao,
                pt.data_inicio_programada, pt.hora_inicio_programada,
                pt.data_fim_programada, pt.hora_fim_programada,
                pt.status, pt.prioridade, pt.testes_programados,
                pt.observacoes_programacao,
                tm.nome_tipo as tipo_maquina,
                d.nome_tipo as departamento,
                s.nome as setor
            FROM programacao_testes pt
            LEFT JOIN tipos_maquina tm ON pt.id_tipo_maquina = tm.id
            LEFT JOIN tipo_departamentos d ON pt.id_departamento = d.id
            LEFT JOIN tipo_setores s ON pt.id_setor = s.id
            WHERE pt.id = :id
        """)
        
        result = session.execute(query, {"id": programacao_id}).fetchone()
        
        if not result:
            print("   ‚ùå Programa√ß√£o n√£o encontrada")
            return False
        
        print("   ‚úÖ Programa√ß√£o encontrada:")
        print(f"      üìÖ {result[1]} - {result[2]}")
        print(f"      üè¢ Departamento: {result[13]}")
        print(f"      üè≠ Setor: {result[14]}")
        print(f"      üîß M√°quina: {result[12]}")
        print(f"      üéØ Status: {result[8]} | Prioridade: {result[9]}")
        print(f"      üìÖ In√≠cio: {result[4]} √†s {result[5]}")
        print(f"      üìÖ Fim: {result[6]} √†s {result[7]}")
        
        # Decodificar testes programados
        if result[10]:
            try:
                testes = json.loads(result[10])
                print(f"      üß™ Testes programados: {len(testes)}")
                for i, teste in enumerate(testes, 1):
                    print(f"         {i}. {teste['nome']} ({teste['tipo']})")
            except:
                print(f"      üß™ Testes: {result[10]}")
        
        print(f"      üìù Observa√ß√µes: {result[11]}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro ao testar programa√ß√£o: {e}")
        return False

def simular_execucao_programacao(programacao_id):
    """Simula a execu√ß√£o da programa√ß√£o"""
    print(f"\n‚ö° Simulando execu√ß√£o da programa√ß√£o {programacao_id}...")
    
    try:
        # 1. Iniciar programa√ß√£o
        print("   üöÄ Iniciando programa√ß√£o...")
        update_query = text("""
            UPDATE programacao_testes 
            SET status = 'EM_ANDAMENTO',
                data_inicio_real = :data_inicio,
                data_ultima_atualizacao = :data_atualizacao
            WHERE id = :id
        """)
        
        session.execute(update_query, {
            "id": programacao_id,
            "data_inicio": datetime.now(),
            "data_atualizacao": datetime.now()
        })
        session.commit()
        print("      ‚úÖ Status alterado para EM_ANDAMENTO")
        
        # 2. Simular progresso
        print("   ‚è≥ Simulando progresso dos testes...")
        import time
        time.sleep(2)  # Simular tempo de execu√ß√£o
        
        # 3. Finalizar programa√ß√£o
        print("   üèÅ Finalizando programa√ß√£o...")
        data_fim = datetime.now()
        tempo_execucao = 120  # 2 horas simuladas
        
        final_update_query = text("""
            UPDATE programacao_testes 
            SET status = 'CONCLUIDO',
                data_fim_real = :data_fim,
                tempo_execucao_minutos = :tempo_execucao,
                resultado_geral = 'APROVADO',
                percentual_aprovacao = 95,
                observacoes_execucao = :observacoes_execucao,
                data_ultima_atualizacao = :data_atualizacao
            WHERE id = :id
        """)
        
        session.execute(final_update_query, {
            "id": programacao_id,
            "data_fim": data_fim,
            "tempo_execucao": tempo_execucao,
            "observacoes_execucao": "Execu√ß√£o simulada conclu√≠da com sucesso. Todos os testes da bateria completa foram executados conforme programado. Resultado geral: APROVADO com 95% de aprova√ß√£o.",
            "data_atualizacao": datetime.now()
        })
        session.commit()
        
        print("      ‚úÖ Status alterado para CONCLUIDO")
        print(f"      ‚è±Ô∏è Tempo de execu√ß√£o: {tempo_execucao} minutos")
        print(f"      üéØ Resultado: APROVADO (95% aprova√ß√£o)")
        
        return True
        
    except Exception as e:
        session.rollback()
        print(f"   ‚ùå Erro na simula√ß√£o: {e}")
        return False

def listar_todas_programacoes():
    """Lista todas as programa√ß√µes do departamento TESTE"""
    print("\nüìã Listando todas as programa√ß√µes do departamento TESTE...")
    
    try:
        query = text("""
            SELECT 
                pt.id, pt.codigo_programacao, pt.titulo, pt.status, pt.prioridade,
                pt.data_inicio_programada, pt.data_fim_programada,
                pt.resultado_geral, pt.percentual_aprovacao
            FROM programacao_testes pt
            JOIN tipo_departamentos d ON pt.id_departamento = d.id
            WHERE d.nome_tipo = 'TESTE'
            ORDER BY pt.data_inicio_programada ASC
        """)
        
        result = session.execute(query).fetchall()
        
        print(f"   üìä Total de programa√ß√µes: {len(result)}")
        
        for row in result:
            status_icon = {
                'PROGRAMADO': 'üìÖ',
                'EM_ANDAMENTO': '‚ö°',
                'CONCLUIDO': '‚úÖ',
                'CANCELADO': '‚ùå'
            }.get(row[3], '‚ùì')
            
            prioridade_icon = {
                'BAIXA': 'üü¢',
                'NORMAL': 'üü°',
                'ALTA': 'üü†',
                'URGENTE': 'üî¥'
            }.get(row[4], '‚ö™')
            
            print(f"\n      {status_icon} {row[1]} - {row[2]}")
            print(f"         Status: {row[3]} | Prioridade: {prioridade_icon} {row[4]}")
            print(f"         Per√≠odo: {row[5]} at√© {row[6]}")
            
            if row[7]:  # resultado_geral
                print(f"         Resultado: {row[7]} ({row[8]}% aprova√ß√£o)")
        
        return result
        
    except Exception as e:
        print(f"   ‚ùå Erro ao listar programa√ß√µes: {e}")
        return []

def main():
    """Fun√ß√£o principal"""
    print("üöÄ CRIANDO E TESTANDO NOVA PROGRAMA√á√ÉO - SETOR TESTES")
    print("=" * 70)
    
    try:
        # 1. Obter dados da hierarquia
        dados = obter_dados_hierarquia()
        if not dados:
            return
        
        # 2. Criar nova programa√ß√£o
        programacao_id = criar_nova_programacao_avancada(dados)
        if not programacao_id:
            return
        
        # 3. Testar programa√ß√£o criada
        if not testar_programacao_criada(programacao_id):
            return
        
        # 4. Simular execu√ß√£o
        if simular_execucao_programacao(programacao_id):
            print("   ‚úÖ Simula√ß√£o de execu√ß√£o conclu√≠da")
        
        # 5. Listar todas as programa√ß√µes
        programacoes = listar_todas_programacoes()
        
        print("\n" + "=" * 70)
        print("üéØ RESUMO DA NOVA PROGRAMA√á√ÉO:")
        print(f"   üìÖ Programa√ß√£o criada: PROG_TESTE_005")
        print(f"   üÜî ID: {programacao_id}")
        print(f"   üéØ Status: CONCLUIDO (simulado)")
        print(f"   üß™ Testes: 5 tipos programados")
        print(f"   üìä Total de programa√ß√µes: {len(programacoes)}")
        
        print("\nüåü SISTEMA DE PROGRAMA√á√ÉO FUNCIONANDO:")
        print("   ‚úÖ Cria√ß√£o de programa√ß√µes")
        print("   ‚úÖ Atualiza√ß√£o de status")
        print("   ‚úÖ Controle de execu√ß√£o")
        print("   ‚úÖ Relat√≥rios de resultado")
        print("   ‚úÖ Integra√ß√£o com hierarquia TESTE")
        
        print("\nüöÄ PR√ìXIMOS PASSOS:")
        print("   1. Acessar frontend para ver programa√ß√µes")
        print("   2. Testar interface de programa√ß√£o")
        print("   3. Criar apontamentos baseados nas programa√ß√µes")
        print("   4. Integrar com sistema de relat√≥rios")
        
    except Exception as e:
        print(f"\n‚ùå ERRO durante o processo: {e}")
        import traceback
        traceback.print_exc()
    finally:
        session.close()

if __name__ == "__main__":
    main()
