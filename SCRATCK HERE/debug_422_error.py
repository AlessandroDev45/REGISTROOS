#!/usr/bin/env python3
"""
Script para debugar o erro 422 na cria√ß√£o de departamentos
"""

import requests
import json
import sys

def debug_422_error():
    """Debug do erro 422"""
    
    print("üêõ DEBUG DO ERRO 422 - CRIA√á√ÉO DE DEPARTAMENTO")
    print("=" * 60)
    
    # URL do endpoint
    url = "http://localhost:8000/api/admin/config/departamentos"
    
    # Dados que o frontend est√° enviando (baseado no log)
    frontend_data = {
        "nome_tipo": "TESTE",
        "descricao": "TESTE", 
        "ativo": True
    }
    
    print(f"üì§ Testando endpoint: {url}")
    print(f"üìÑ Dados enviados: {json.dumps(frontend_data, indent=2)}")
    
    # Teste 1: Sem autentica√ß√£o (deve dar 401)
    print(f"\n1Ô∏è‚É£ Teste sem autentica√ß√£o:")
    try:
        response = requests.post(url, json=frontend_data)
        print(f"   Status: {response.status_code}")
        print(f"   Resposta: {response.text}")
        
        if response.status_code == 401:
            print("   ‚úÖ Erro 401 esperado (sem autentica√ß√£o)")
        else:
            print(f"   ‚ùå Status inesperado: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erro na requisi√ß√£o: {e}")
    
    # Teste 2: Verificar se o endpoint existe
    print(f"\n2Ô∏è‚É£ Verificando se o endpoint existe:")
    try:
        # Tentar OPTIONS para ver se o endpoint existe
        response = requests.options(url)
        print(f"   Status OPTIONS: {response.status_code}")
        print(f"   Headers: {dict(response.headers)}")
        
        if response.status_code == 200:
            print("   ‚úÖ Endpoint existe")
        else:
            print(f"   ‚ùå Problema com endpoint: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erro na requisi√ß√£o OPTIONS: {e}")
    
    # Teste 3: Verificar documenta√ß√£o da API
    print(f"\n3Ô∏è‚É£ Verificando documenta√ß√£o da API:")
    try:
        docs_response = requests.get("http://localhost:8000/openapi.json")
        if docs_response.status_code == 200:
            openapi_spec = docs_response.json()
            paths = openapi_spec.get("paths", {})
            
            endpoint_path = "/api/admin/config/departamentos"
            if endpoint_path in paths:
                endpoint_info = paths[endpoint_path]
                print(f"   ‚úÖ Endpoint encontrado na documenta√ß√£o")
                
                if "post" in endpoint_info:
                    post_info = endpoint_info["post"]
                    print(f"   üìã POST endpoint existe")
                    
                    # Verificar schema do request body
                    if "requestBody" in post_info:
                        request_body = post_info["requestBody"]
                        print(f"   üìÑ Request body definido: {json.dumps(request_body, indent=4)}")
                    else:
                        print(f"   ‚ùå Request body n√£o definido")
                        
                    # Verificar responses
                    if "responses" in post_info:
                        responses = post_info["responses"]
                        print(f"   üìä Responses definidas: {list(responses.keys())}")
                        
                        if "422" in responses:
                            print(f"   ‚ö†Ô∏è Response 422 definida: {responses['422']}")
                    
                else:
                    print(f"   ‚ùå POST method n√£o encontrado")
            else:
                print(f"   ‚ùå Endpoint n√£o encontrado na documenta√ß√£o")
                print(f"   üìã Endpoints dispon√≠veis: {list(paths.keys())}")
        else:
            print(f"   ‚ùå Erro ao buscar documenta√ß√£o: {docs_response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar documenta√ß√£o: {e}")
    
    # Teste 4: Verificar se h√° problemas com o modelo
    print(f"\n4Ô∏è‚É£ Testando varia√ß√µes dos dados:")
    
    test_cases = [
        {
            "name": "Dados m√≠nimos",
            "data": {"nome_tipo": "TESTE"}
        },
        {
            "name": "Sem ativo (deve usar padr√£o)",
            "data": {"nome_tipo": "TESTE", "descricao": "TESTE"}
        },
        {
            "name": "Com ID (pode causar problema)",
            "data": {"id": 999, "nome_tipo": "TESTE", "descricao": "TESTE", "ativo": True}
        },
        {
            "name": "String vazia na descri√ß√£o",
            "data": {"nome_tipo": "TESTE", "descricao": "", "ativo": True}
        },
        {
            "name": "Descri√ß√£o null",
            "data": {"nome_tipo": "TESTE", "descricao": None, "ativo": True}
        }
    ]
    
    for test_case in test_cases:
        print(f"\n   üß™ {test_case['name']}:")
        print(f"      Dados: {json.dumps(test_case['data'], indent=6)}")
        
        try:
            response = requests.post(url, json=test_case['data'])
            print(f"      Status: {response.status_code}")
            
            if response.status_code == 422:
                print(f"      ‚ùå Erro 422: {response.text}")
            elif response.status_code == 401:
                print(f"      ‚úÖ Erro 401 (autentica√ß√£o) - dados v√°lidos")
            else:
                print(f"      üìÑ Resposta: {response.text}")
                
        except Exception as e:
            print(f"      ‚ùå Erro: {e}")
    
    print(f"\nüìä CONCLUS√ïES:")
    print("- Se todos os testes d√£o 401, o problema √© s√≥ autentica√ß√£o")
    print("- Se algum teste d√° 422, h√° problema de valida√ß√£o nos dados")
    print("- Se o endpoint n√£o existe, h√° problema de roteamento")
    
    print(f"\nüîß PR√ìXIMOS PASSOS:")
    print("1. Se o problema √© autentica√ß√£o, verificar cookies/tokens no frontend")
    print("2. Se o problema √© valida√ß√£o, ajustar o modelo Pydantic ou dados")
    print("3. Se o problema √© roteamento, verificar se o endpoint est√° registrado")

def main():
    """Fun√ß√£o principal"""
    debug_422_error()

if __name__ == "__main__":
    main()
