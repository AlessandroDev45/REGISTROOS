#!/usr/bin/env python3
"""
VERIFICA√á√ÉO FINAL DA IMPLEMENTA√á√ÉO
==================================

Script para verificar se todos os componentes da solu√ß√£o de scraping
foram implementados corretamente e est√£o funcionando.
"""

import sys
import os
import importlib.util
from pathlib import Path

def check_file_exists(file_path, description):
    """Verifica se um arquivo existe"""
    if os.path.exists(file_path):
        print(f"‚úÖ {description}: {file_path}")
        return True
    else:
        print(f"‚ùå {description}: {file_path} - N√ÉO ENCONTRADO")
        return False

def check_import(module_path, module_name, description):
    """Verifica se um m√≥dulo pode ser importado"""
    try:
        if os.path.exists(module_path):
            spec = importlib.util.spec_from_file_location(module_name, module_path)
            if spec and spec.loader:
                module = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(module)
                print(f"‚úÖ {description}: Importa√ß√£o bem-sucedida")
                return True, module
        print(f"‚ùå {description}: Erro na importa√ß√£o")
        return False, None
    except Exception as e:
        print(f"‚ùå {description}: Erro - {e}")
        return False, None

def check_function_exists(module, function_name, description):
    """Verifica se uma fun√ß√£o existe no m√≥dulo"""
    if module and hasattr(module, function_name):
        func = getattr(module, function_name)
        if callable(func):
            print(f"‚úÖ {description}: Fun√ß√£o {function_name} dispon√≠vel")
            return True
        else:
            print(f"‚ùå {description}: {function_name} n√£o √© callable")
            return False
    else:
        print(f"‚ùå {description}: Fun√ß√£o {function_name} n√£o encontrada")
        return False

def main():
    print("üîç VERIFICA√á√ÉO FINAL DA IMPLEMENTA√á√ÉO DE SCRAPING PARA PRODU√á√ÉO")
    print("=" * 70)
    
    # Definir caminhos base
    base_path = Path(__file__).parent.parent
    backend_path = base_path / "RegistroOS" / "registrooficial" / "backend"
    
    print(f"üìÅ Diret√≥rio base: {base_path}")
    print(f"üìÅ Backend: {backend_path}")
    print()
    
    # Lista de verifica√ß√µes
    checks = []
    
    # 1. Verificar arquivos principais
    print("üìã 1. VERIFICANDO ARQUIVOS PRINCIPAIS")
    print("-" * 40)
    
    files_to_check = [
        (backend_path / "tasks" / "scraping_tasks.py", "Tasks de scraping"),
        (backend_path / "scripts" / "scrape_os_data.py", "Script original de scraping"),
        (backend_path / "scripts" / "scrape_os_data_optimized.py", "Script otimizado de scraping"),
        (backend_path / "routes" / "desenvolvimento.py", "Rotas de desenvolvimento"),
        (backend_path / "routes" / "admin_config_routes.py", "Rotas administrativas"),
        (backend_path / "celery_config.py", "Configura√ß√£o do Celery"),
    ]
    
    for file_path, description in files_to_check:
        checks.append(check_file_exists(str(file_path), description))
    
    print()
    
    # 2. Verificar imports e fun√ß√µes
    print("üìã 2. VERIFICANDO IMPORTS E FUN√á√ïES")
    print("-" * 40)
    
    # Verificar tasks de scraping
    tasks_path = str(backend_path / "tasks" / "scraping_tasks.py")
    success, tasks_module = check_import(tasks_path, "scraping_tasks", "M√≥dulo de tasks")
    checks.append(success)
    
    if success and tasks_module:
        # Verificar fun√ß√µes espec√≠ficas
        functions_to_check = [
            ("scrape_os_task", "Task de scraping individual"),
            ("scrape_batch_os_task", "Task de scraping em lote"),
            ("get_queue_status", "Fun√ß√£o de status da fila"),
            ("get_scraping_statistics", "Fun√ß√£o de estat√≠sticas"),
            ("save_batch_stats", "Fun√ß√£o de salvar estat√≠sticas de lote"),
            ("save_scraping_usage_stats", "Fun√ß√£o de salvar estat√≠sticas de uso"),
        ]
        
        for func_name, description in functions_to_check:
            checks.append(check_function_exists(tasks_module, func_name, description))
    
    print()
    
    # 3. Verificar script otimizado
    print("üìã 3. VERIFICANDO SCRIPT OTIMIZADO")
    print("-" * 40)
    
    optimized_path = str(backend_path / "scripts" / "scrape_os_data_optimized.py")
    success, optimized_module = check_import(optimized_path, "scrape_os_data_optimized", "Script otimizado")
    checks.append(success)
    
    if success and optimized_module:
        optimized_functions = [
            ("execute_scraping_optimized", "Fun√ß√£o de scraping otimizada"),
            ("OptimizedScrapingSession", "Classe de sess√£o otimizada"),
            ("get_cached_session", "Fun√ß√£o de cache de sess√£o"),
            ("cleanup_expired_sessions", "Fun√ß√£o de limpeza de sess√µes"),
        ]
        
        for func_name, description in optimized_functions:
            checks.append(check_function_exists(optimized_module, func_name, description))
    
    print()
    
    # 4. Verificar rotas
    print("üìã 4. VERIFICANDO ROTAS")
    print("-" * 40)
    
    routes_path = str(backend_path / "routes" / "desenvolvimento.py")
    success, routes_module = check_import(routes_path, "desenvolvimento", "Rotas de desenvolvimento")
    checks.append(success)
    
    if success:
        print("‚úÖ Rotas de desenvolvimento: Importa√ß√£o bem-sucedida")
        
        # Verificar se as fun√ß√µes auxiliares existem
        if hasattr(routes_module, 'safe_apply_async'):
            print("‚úÖ Fun√ß√£o auxiliar safe_apply_async dispon√≠vel")
            checks.append(True)
        else:
            print("‚ùå Fun√ß√£o auxiliar safe_apply_async n√£o encontrada")
            checks.append(False)
            
        if hasattr(routes_module, 'safe_call_function'):
            print("‚úÖ Fun√ß√£o auxiliar safe_call_function dispon√≠vel")
            checks.append(True)
        else:
            print("‚ùå Fun√ß√£o auxiliar safe_call_function n√£o encontrada")
            checks.append(False)
    
    print()
    
    # 5. Verificar configura√ß√£o do Celery
    print("üìã 5. VERIFICANDO CONFIGURA√á√ÉO DO CELERY")
    print("-" * 40)
    
    celery_path = str(backend_path / "celery_config.py")
    success, celery_module = check_import(celery_path, "celery_config", "Configura√ß√£o do Celery")
    checks.append(success)
    
    if success and celery_module:
        if hasattr(celery_module, 'app'):
            print("‚úÖ Aplica√ß√£o Celery configurada")
            checks.append(True)
        else:
            print("‚ùå Aplica√ß√£o Celery n√£o encontrada")
            checks.append(False)
    
    print()
    
    # 6. Verificar documenta√ß√£o
    print("üìã 6. VERIFICANDO DOCUMENTA√á√ÉO")
    print("-" * 40)
    
    docs_to_check = [
        (Path(__file__).parent / "SOLUCAO_SCRAPING_PRODUCAO_IMPLEMENTADA.md", "Documenta√ß√£o da solu√ß√£o"),
        (Path(__file__).parent / "INSTRUCOES_DEPLOY_PRODUCAO.md", "Instru√ß√µes de deploy"),
        (Path(__file__).parent / "teste_scraping_producao.py", "Script de teste"),
    ]
    
    for file_path, description in docs_to_check:
        checks.append(check_file_exists(str(file_path), description))
    
    print()
    
    # Resumo final
    print("=" * 70)
    print("üìä RESUMO DA VERIFICA√á√ÉO")
    print("=" * 70)
    
    passed = sum(checks)
    total = len(checks)
    percentage = (passed / total) * 100 if total > 0 else 0
    
    print(f"‚úÖ Verifica√ß√µes passaram: {passed}/{total} ({percentage:.1f}%)")
    
    if percentage >= 95:
        print("üéâ EXCELENTE! Implementa√ß√£o est√° 100% completa e pronta para produ√ß√£o!")
        status = "PRONTO PARA PRODU√á√ÉO"
    elif percentage >= 85:
        print("‚úÖ BOM! Implementa√ß√£o est√° quase completa. Verificar itens faltantes.")
        status = "QUASE PRONTO"
    elif percentage >= 70:
        print("‚ö†Ô∏è PARCIAL! Implementa√ß√£o tem problemas que precisam ser corrigidos.")
        status = "PRECISA CORRE√á√ïES"
    else:
        print("‚ùå CR√çTICO! Muitos componentes est√£o faltando ou com problemas.")
        status = "IMPLEMENTA√á√ÉO INCOMPLETA"
    
    print(f"üè∑Ô∏è Status: {status}")
    
    # Pr√≥ximos passos
    if percentage < 100:
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Corrigir os itens marcados com ‚ùå")
        print("2. Executar novamente esta verifica√ß√£o")
        print("3. Testar com o script teste_scraping_producao.py")
    else:
        print("\nüöÄ PR√ìXIMOS PASSOS:")
        print("1. Instalar Redis: pip install redis")
        print("2. Instalar Celery: pip install celery")
        print("3. Iniciar workers: celery -A celery_config worker")
        print("4. Testar com: python teste_scraping_producao.py")
        print("5. Usar em produ√ß√£o para processar 1000 OS!")
    
    return percentage >= 95

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
