#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para criar departamento TESTE com toda a hierarquia necess√°ria
"""

import sys
import os
from datetime import datetime
import json

# Adicionar o caminho do backend ao sys.path
backend_path = os.path.join(os.path.dirname(__file__), '..', 'RegistroOS', 'registrooficial', 'backend')
sys.path.append(backend_path)

from sqlalchemy.orm import sessionmaker
from config.database_config import engine
from app.database_models import (
    Departamento, Setor, TipoMaquina, TipoTeste, TipoAtividade, 
    TipoDescricaoAtividade, TipoFalha, TipoCausaRetrabalho
)

# Criar sess√£o
Session = sessionmaker(bind=engine)
session = Session()

def criar_departamento_teste():
    """Cria o departamento TESTE"""
    print("üè¢ Criando departamento TESTE...")
    
    # Verificar se j√° existe
    dept_existente = session.query(Departamento).filter_by(nome_tipo="TESTE").first()
    if dept_existente:
        print(f"   ‚úÖ Departamento TESTE j√° existe (ID: {dept_existente.id})")
        return dept_existente
    
    # Criar novo departamento
    departamento = Departamento(
        nome_tipo="TESTE",
        descricao="Departamento de Testes e Valida√ß√£o",
        ativo=True,
        data_criacao=datetime.now(),
        data_ultima_atualizacao=datetime.now()
    )
    
    session.add(departamento)
    session.flush()  # Para obter o ID
    
    print(f"   ‚úÖ Departamento TESTE criado (ID: {departamento.id})")
    return departamento

def criar_setor_testes(departamento):
    """Cria o setor TESTES"""
    print("üè≠ Criando setor TESTES...")
    
    # Verificar se j√° existe
    setor_existente = session.query(Setor).filter_by(
        nome="TESTES", 
        departamento="TESTE"
    ).first()
    
    if setor_existente:
        print(f"   ‚úÖ Setor TESTES j√° existe (ID: {setor_existente.id})")
        return setor_existente
    
    # Criar novo setor
    setor = Setor(
        nome="TESTES",
        departamento="TESTE",
        descricao="Setor de Testes e Valida√ß√£o de Equipamentos",
        ativo=True,
        data_criacao=datetime.now(),
        data_ultima_atualizacao=datetime.now(),
        id_departamento=departamento.id,
        area_tipo="TESTE",  # Campo obrigat√≥rio
        supervisor_responsavel=1,  # ID do admin como supervisor padr√£o
        permite_apontamento=True  # Permitir apontamentos
    )
    
    session.add(setor)
    session.flush()
    
    print(f"   ‚úÖ Setor TESTES criado (ID: {setor.id})")
    return setor

def criar_tipos_maquina():
    """Cria tipos de m√°quina para o departamento TESTE"""
    print("üîß Criando tipos de m√°quina...")
    
    tipos_maquina = [
        {
            "nome_tipo": "EQUIPAMENTO TESTE A",
            "categoria": "CATEGORIA_A",
            "subcategoria": ["SUB_A1", "SUB_A2", "SUB_A3"],
            "descricao": "Equipamento de teste categoria A para valida√ß√£o"
        },
        {
            "nome_tipo": "EQUIPAMENTO TESTE B", 
            "categoria": "CATEGORIA_B",
            "subcategoria": ["SUB_B1", "SUB_B2"],
            "descricao": "Equipamento de teste categoria B para valida√ß√£o"
        },
        {
            "nome_tipo": "EQUIPAMENTO TESTE C",
            "categoria": "CATEGORIA_C", 
            "subcategoria": ["SUB_C1", "SUB_C2", "SUB_C3", "SUB_C4"],
            "descricao": "Equipamento de teste categoria C para valida√ß√£o"
        }
    ]
    
    maquinas_criadas = []
    
    for tipo_data in tipos_maquina:
        # Verificar se j√° existe
        existente = session.query(TipoMaquina).filter_by(
            nome_tipo=tipo_data["nome_tipo"],
            departamento="TESTE"
        ).first()
        
        if existente:
            print(f"   ‚úÖ {tipo_data['nome_tipo']} j√° existe")
            maquinas_criadas.append(existente)
            continue
        
        # Criar novo tipo
        maquina = TipoMaquina(
            nome_tipo=tipo_data["nome_tipo"],
            categoria=tipo_data["categoria"],
            subcategoria=json.dumps(tipo_data["subcategoria"]),
            descricao=tipo_data["descricao"],
            ativo=True,
            data_criacao=datetime.now(),
            data_ultima_atualizacao=datetime.now(),
            departamento="TESTE",
            setor="TESTES"
        )
        
        session.add(maquina)
        session.flush()
        maquinas_criadas.append(maquina)
        
        print(f"   ‚úÖ {tipo_data['nome_tipo']} criado (ID: {maquina.id})")
    
    return maquinas_criadas

def criar_tipos_teste():
    """Cria tipos de teste para o departamento TESTE"""
    print("üß™ Criando tipos de teste...")
    
    tipos_teste = [
        {
            "nome": "TESTE FUNCIONAL B√ÅSICO",
            "tipo_teste": "FUNCIONAL",
            "descricao": "Teste b√°sico de funcionamento do equipamento",
            "categoria": "BASICO"
        },
        {
            "nome": "TESTE DE PERFORMANCE",
            "tipo_teste": "PERFORMANCE", 
            "descricao": "Teste de performance e efici√™ncia",
            "categoria": "AVANCADO"
        },
        {
            "nome": "TESTE DE SEGURAN√áA",
            "tipo_teste": "SEGURANCA",
            "descricao": "Teste de seguran√ßa e prote√ß√µes",
            "categoria": "CRITICO"
        },
        {
            "nome": "TESTE DE DURABILIDADE",
            "tipo_teste": "DURABILIDADE",
            "descricao": "Teste de resist√™ncia e durabilidade",
            "categoria": "AVANCADO"
        },
        {
            "nome": "TESTE DE CALIBRA√á√ÉO",
            "tipo_teste": "CALIBRACAO",
            "descricao": "Teste de calibra√ß√£o e precis√£o",
            "categoria": "BASICO"
        }
    ]
    
    testes_criados = []
    
    for teste_data in tipos_teste:
        # Verificar se j√° existe
        existente = session.query(TipoTeste).filter_by(
            nome=teste_data["nome"],
            departamento="TESTE"
        ).first()
        
        if existente:
            print(f"   ‚úÖ {teste_data['nome']} j√° existe")
            testes_criados.append(existente)
            continue
        
        # Criar novo teste
        teste = TipoTeste(
            nome=teste_data["nome"],
            departamento="TESTE",
            setor="TESTES",
            tipo_teste=teste_data["tipo_teste"],
            descricao=teste_data["descricao"],
            categoria=teste_data["categoria"],
            ativo=True,
            data_criacao=datetime.now(),
            data_ultima_atualizacao=datetime.now()
        )
        
        session.add(teste)
        session.flush()
        testes_criados.append(teste)
        
        print(f"   ‚úÖ {teste_data['nome']} criado (ID: {teste.id})")
    
    return testes_criados

def criar_atividades():
    """Cria atividades para o departamento TESTE"""
    print("üìã Criando atividades...")
    
    atividades = [
        {
            "nome_tipo": "PREPARA√á√ÉO DE TESTE",
            "categoria": "PREPARACAO",
            "descricao": "Atividade de prepara√ß√£o e setup para testes"
        },
        {
            "nome_tipo": "EXECU√á√ÉO DE TESTE",
            "categoria": "EXECUCAO", 
            "descricao": "Atividade de execu√ß√£o dos testes"
        },
        {
            "nome_tipo": "AN√ÅLISE DE RESULTADOS",
            "categoria": "ANALISE",
            "descricao": "Atividade de an√°lise e interpreta√ß√£o dos resultados"
        },
        {
            "nome_tipo": "DOCUMENTA√á√ÉO",
            "categoria": "DOCUMENTACAO",
            "descricao": "Atividade de documenta√ß√£o dos testes realizados"
        }
    ]
    
    atividades_criadas = []
    
    for ativ_data in atividades:
        # Verificar se j√° existe
        existente = session.query(TipoAtividade).filter_by(
            nome_tipo=ativ_data["nome_tipo"],
            departamento="TESTE"
        ).first()
        
        if existente:
            print(f"   ‚úÖ {ativ_data['nome_tipo']} j√° existe")
            atividades_criadas.append(existente)
            continue
        
        # Criar nova atividade
        atividade = TipoAtividade(
            nome_tipo=ativ_data["nome_tipo"],
            categoria=ativ_data["categoria"],
            descricao=ativ_data["descricao"],
            ativo=True,
            data_criacao=datetime.now(),
            data_ultima_atualizacao=datetime.now(),
            departamento="TESTE",
            setor="TESTES"
        )
        
        session.add(atividade)
        session.flush()
        atividades_criadas.append(atividade)
        
        print(f"   ‚úÖ {ativ_data['nome_tipo']} criado (ID: {atividade.id})")
    
    return atividades_criadas

def criar_descricoes_atividade():
    """Cria descri√ß√µes de atividade para o departamento TESTE"""
    print("üìÑ Criando descri√ß√µes de atividade...")

    descricoes = [
        {
            "codigo": "PREP_001",
            "descricao": "PREPARA√á√ÉO INICIAL - Setup b√°sico do equipamento",
            "categoria": "PREPARACAO"
        },
        {
            "codigo": "PREP_002",
            "descricao": "PREPARA√á√ÉO AVAN√áADA - Configura√ß√£o completa",
            "categoria": "PREPARACAO"
        },
        {
            "codigo": "EXEC_001",
            "descricao": "EXECU√á√ÉO B√ÅSICA - Testes funcionais simples",
            "categoria": "EXECUCAO"
        },
        {
            "codigo": "EXEC_002",
            "descricao": "EXECU√á√ÉO AVAN√áADA - Testes complexos",
            "categoria": "EXECUCAO"
        },
        {
            "codigo": "ANAL_001",
            "descricao": "AN√ÅLISE PRELIMINAR - Verifica√ß√£o inicial",
            "categoria": "ANALISE"
        },
        {
            "codigo": "ANAL_002",
            "descricao": "AN√ÅLISE DETALHADA - Estudo completo dos resultados",
            "categoria": "ANALISE"
        },
        {
            "codigo": "DOC_001",
            "descricao": "DOCUMENTA√á√ÉO B√ÅSICA - Relat√≥rio simples",
            "categoria": "DOCUMENTACAO"
        },
        {
            "codigo": "DOC_002",
            "descricao": "DOCUMENTA√á√ÉO COMPLETA - Relat√≥rio detalhado",
            "categoria": "DOCUMENTACAO"
        }
    ]

    descricoes_criadas = []

    for desc_data in descricoes:
        # Verificar se j√° existe
        existente = session.query(TipoDescricaoAtividade).filter_by(
            codigo=desc_data["codigo"],
            departamento="TESTE"
        ).first()

        if existente:
            print(f"   ‚úÖ {desc_data['codigo']} j√° existe")
            descricoes_criadas.append(existente)
            continue

        # Criar nova descri√ß√£o
        descricao = TipoDescricaoAtividade(
            codigo=desc_data["codigo"],
            descricao=desc_data["descricao"],
            categoria=desc_data["categoria"],
            ativo=True,
            data_criacao=datetime.now(),
            data_ultima_atualizacao=datetime.now(),
            departamento="TESTE",
            setor="TESTES"
        )

        session.add(descricao)
        session.flush()
        descricoes_criadas.append(descricao)

        print(f"   ‚úÖ {desc_data['codigo']} criado (ID: {descricao.id})")

    return descricoes_criadas

def criar_tipos_falha():
    """Cria tipos de falha para o departamento TESTE"""
    print("‚ö†Ô∏è Criando tipos de falha...")

    tipos_falha = [
        {
            "codigo": "FALHA_001",
            "descricao": "FALHA DE COMUNICA√á√ÉO - Problema na comunica√ß√£o",
            "categoria": "COMUNICACAO",
            "severidade": "MEDIA"
        },
        {
            "codigo": "FALHA_002",
            "descricao": "FALHA EL√âTRICA - Problema el√©trico",
            "categoria": "ELETRICA",
            "severidade": "ALTA"
        },
        {
            "codigo": "FALHA_003",
            "descricao": "FALHA MEC√ÇNICA - Problema mec√¢nico",
            "categoria": "MECANICA",
            "severidade": "ALTA"
        },
        {
            "codigo": "FALHA_004",
            "descricao": "FALHA DE SOFTWARE - Problema no software",
            "categoria": "SOFTWARE",
            "severidade": "MEDIA"
        },
        {
            "codigo": "FALHA_005",
            "descricao": "FALHA DE CALIBRA√á√ÉO - Descalibra√ß√£o",
            "categoria": "CALIBRACAO",
            "severidade": "BAIXA"
        },
        {
            "codigo": "FALHA_006",
            "descricao": "FALHA CR√çTICA - Falha que impede funcionamento",
            "categoria": "CRITICA",
            "severidade": "CRITICA"
        }
    ]

    falhas_criadas = []

    for falha_data in tipos_falha:
        # Verificar se j√° existe
        existente = session.query(TipoFalha).filter_by(
            codigo=falha_data["codigo"]
        ).first()

        if existente:
            print(f"   ‚úÖ {falha_data['codigo']} j√° existe")
            falhas_criadas.append(existente)
            continue

        # Criar nova falha
        falha = TipoFalha(
            codigo=falha_data["codigo"],
            descricao=falha_data["descricao"],
            categoria=falha_data["categoria"],
            severidade=falha_data["severidade"],
            ativo=True,
            data_criacao=datetime.now(),
            data_ultima_atualizacao=datetime.now()
        )

        session.add(falha)
        session.flush()
        falhas_criadas.append(falha)

        print(f"   ‚úÖ {falha_data['codigo']} criado (ID: {falha.id})")

    return falhas_criadas

def criar_causas_retrabalho(departamento):
    """Cria causas de retrabalho para o departamento TESTE"""
    print("üîÑ Criando causas de retrabalho...")

    causas = [
        {
            "codigo": "RETR_001",
            "descricao": "ERRO NA PREPARA√á√ÉO - Prepara√ß√£o inadequada"
        },
        {
            "codigo": "RETR_002",
            "descricao": "FALHA NO EQUIPAMENTO - Equipamento apresentou falha"
        },
        {
            "codigo": "RETR_003",
            "descricao": "ERRO HUMANO - Erro do operador"
        },
        {
            "codigo": "RETR_004",
            "descricao": "CONDI√á√ïES AMBIENTAIS - Condi√ß√µes inadequadas"
        },
        {
            "codigo": "RETR_005",
            "descricao": "MATERIAL DEFEITUOSO - Material com defeito"
        },
        {
            "codigo": "RETR_006",
            "descricao": "PROCEDIMENTO INCORRETO - Procedimento n√£o seguido"
        }
    ]

    causas_criadas = []

    for causa_data in causas:
        # Verificar se j√° existe
        existente = session.query(TipoCausaRetrabalho).filter_by(
            codigo=causa_data["codigo"],
            id_departamento=departamento.id
        ).first()

        if existente:
            print(f"   ‚úÖ {causa_data['codigo']} j√° existe")
            causas_criadas.append(existente)
            continue

        # Criar nova causa
        causa = TipoCausaRetrabalho(
            codigo=causa_data["codigo"],
            descricao=causa_data["descricao"],
            ativo=True,
            data_criacao=datetime.now(),
            data_ultima_atualizacao=datetime.now(),
            id_departamento=departamento.id
        )

        session.add(causa)
        session.flush()
        causas_criadas.append(causa)

        print(f"   ‚úÖ {causa_data['codigo']} criado (ID: {causa.id})")

    return causas_criadas

def main():
    """Fun√ß√£o principal para criar toda a hierarquia"""
    print("üöÄ CRIANDO DEPARTAMENTO TESTE COM HIERARQUIA COMPLETA")
    print("=" * 60)

    try:
        # 1. Criar departamento
        departamento = criar_departamento_teste()

        # 2. Criar setor
        setor = criar_setor_testes(departamento)

        # 3. Criar tipos de m√°quina
        maquinas = criar_tipos_maquina()

        # 4. Criar tipos de teste
        testes = criar_tipos_teste()

        # 5. Criar atividades
        atividades = criar_atividades()

        # 6. Criar descri√ß√µes de atividade
        descricoes = criar_descricoes_atividade()

        # 7. Criar tipos de falha
        falhas = criar_tipos_falha()

        # 8. Criar causas de retrabalho
        causas = criar_causas_retrabalho(departamento)

        # Commit das altera√ß√µes
        session.commit()

        print("\n" + "=" * 60)
        print("üéØ RESUMO DA CRIA√á√ÉO:")
        print(f"   üè¢ Departamento: TESTE (ID: {departamento.id})")
        print(f"   üè≠ Setor: TESTES (ID: {setor.id})")
        print(f"   üîß Tipos de M√°quina: {len(maquinas)} criados")
        print(f"   üß™ Tipos de Teste: {len(testes)} criados")
        print(f"   üìã Atividades: {len(atividades)} criadas")
        print(f"   üìÑ Descri√ß√µes: {len(descricoes)} criadas")
        print(f"   ‚ö†Ô∏è Tipos de Falha: {len(falhas)} criados")
        print(f"   üîÑ Causas Retrabalho: {len(causas)} criadas")

        print("\n‚úÖ HIERARQUIA COMPLETA CRIADA COM SUCESSO!")

        # Verificar estrutura criada
        verificar_estrutura_criada(departamento)

    except Exception as e:
        print(f"\n‚ùå ERRO durante a cria√ß√£o: {e}")
        session.rollback()
        raise
    finally:
        session.close()

def verificar_estrutura_criada(departamento):
    """Verifica se toda a estrutura foi criada corretamente"""
    print("\nüîç VERIFICANDO ESTRUTURA CRIADA:")

    # Verificar departamento
    dept = session.query(Departamento).filter_by(id=departamento.id).first()
    print(f"   üè¢ Departamento: {dept.nome_tipo if dept else 'N√ÉO ENCONTRADO'}")

    # Verificar setor
    setor = session.query(Setor).filter_by(departamento="TESTE").first()
    print(f"   üè≠ Setor: {setor.nome if setor else 'N√ÉO ENCONTRADO'}")

    # Contar registros criados
    count_maquinas = session.query(TipoMaquina).filter_by(departamento="TESTE").count()
    count_testes = session.query(TipoTeste).filter_by(departamento="TESTE").count()
    count_atividades = session.query(TipoAtividade).filter_by(departamento="TESTE").count()
    count_descricoes = session.query(TipoDescricaoAtividade).filter_by(departamento="TESTE").count()
    count_falhas = session.query(TipoFalha).count()
    count_causas = session.query(TipoCausaRetrabalho).filter_by(id_departamento=departamento.id).count()

    print(f"   üîß Tipos de M√°quina: {count_maquinas}")
    print(f"   üß™ Tipos de Teste: {count_testes}")
    print(f"   üìã Atividades: {count_atividades}")
    print(f"   üìÑ Descri√ß√µes: {count_descricoes}")
    print(f"   ‚ö†Ô∏è Tipos de Falha: {count_falhas}")
    print(f"   üîÑ Causas Retrabalho: {count_causas}")

    print("\nüå≥ ESTRUTURA HIER√ÅRQUICA COMPLETA:")
    print("   TESTE (Departamento)")
    print("   ‚îî‚îÄ‚îÄ TESTES (Setor)")
    print("       ‚îú‚îÄ‚îÄ EQUIPAMENTO TESTE A, B, C (M√°quinas)")
    print("       ‚îú‚îÄ‚îÄ 5 Tipos de Teste (Funcional, Performance, etc.)")
    print("       ‚îú‚îÄ‚îÄ 4 Atividades (Prepara√ß√£o, Execu√ß√£o, etc.)")
    print("       ‚îú‚îÄ‚îÄ 8 Descri√ß√µes de Atividade")
    print("       ‚îú‚îÄ‚îÄ 6 Tipos de Falha")
    print("       ‚îî‚îÄ‚îÄ 6 Causas de Retrabalho")

if __name__ == "__main__":
    main()
