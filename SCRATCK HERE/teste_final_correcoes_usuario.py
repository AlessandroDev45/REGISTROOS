#!/usr/bin/env python3
"""
Teste final das corre√ß√µes solicitadas pelo usu√°rio:

1. Garantir que ao criar programa√ß√£o busca dados da API
2. Departamento MOTORES e Setor LABORATORIO DE ENSAIOS ELETRICOS (MOTORES) 
3. Apenas supervisores que trabalham na produ√ß√£o
4. Ao criar programa√ß√£o, atualizar campos corretos nas tabelas
5. N√£o conflitar com funcionalidades existentes
"""

import requests
import json
from datetime import datetime, timedelta

BASE_URL = "http://localhost:8000"

def test_login():
    """Fazer login e obter cookies"""
    login_data = {
        "username": "admin@registroos.com", 
        "password": "123456"
    }
    
    response = requests.post(f"{BASE_URL}/api/token", data=login_data)
    print(f"‚úÖ Login status: {response.status_code}")
    
    if response.status_code == 200:
        return response.cookies
    else:
        print(f"‚ùå Erro no login: {response.text}")
        return None

def test_departamento_motores_setor_laboratorio(cookies):
    """Testar se departamento MOTORES e setor LABORATORIO est√£o dispon√≠veis"""
    print(f"\n{'='*60}")
    print("üîç TESTE: Departamento MOTORES e Setor LABORATORIO")
    
    # Buscar dados do formul√°rio
    response = requests.get(f"{BASE_URL}/api/pcp/programacao-form-data", cookies=cookies)
    
    if response.status_code != 200:
        print(f"‚ùå Erro ao buscar dados do formul√°rio: {response.status_code}")
        return False
        
    data = response.json()
    setores = data.get('setores', [])
    
    # Verificar se existe setor LABORATORIO DE ENSAIOS ELETRICOS do departamento MOTORES
    setor_laboratorio_motores = None
    for setor in setores:
        if ('LABORATORIO DE ENSAIOS ELETRICOS' in setor.get('nome', '') and 
            setor.get('departamento_nome') == 'MOTORES'):
            setor_laboratorio_motores = setor
            break
    
    if setor_laboratorio_motores:
        print(f"‚úÖ Setor encontrado: {setor_laboratorio_motores['nome']}")
        print(f"‚úÖ Departamento: {setor_laboratorio_motores['departamento_nome']}")
        print(f"‚úÖ ID do setor: {setor_laboratorio_motores['id']}")
        return setor_laboratorio_motores
    else:
        print("‚ùå Setor LABORATORIO DE ENSAIOS ELETRICOS (MOTORES) n√£o encontrado")
        return None

def test_supervisores_producao(cookies):
    """Testar se apenas supervisores de produ√ß√£o s√£o retornados"""
    print(f"\n{'='*60}")
    print("üë• TESTE: Supervisores de Produ√ß√£o")
    
    response = requests.get(f"{BASE_URL}/api/pcp/programacao-form-data", cookies=cookies)
    
    if response.status_code != 200:
        print(f"‚ùå Erro ao buscar supervisores: {response.status_code}")
        return []
        
    data = response.json()
    supervisores = data.get('usuarios', [])
    
    print(f"‚úÖ Total de supervisores retornados: {len(supervisores)}")
    
    # Verificar se h√° supervisor do LABORATORIO DE ENSAIOS ELETRICOS
    supervisor_laboratorio = None
    for supervisor in supervisores:
        print(f"   - {supervisor['nome_completo']} (Setor: {supervisor['setor_nome']})")
        if 'LABORATORIO DE ENSAIOS ELETRICOS' in supervisor.get('setor_nome', ''):
            supervisor_laboratorio = supervisor
    
    if supervisor_laboratorio:
        print(f"‚úÖ Supervisor do laborat√≥rio encontrado: {supervisor_laboratorio['nome_completo']}")
        return supervisor_laboratorio
    else:
        print("‚ùå Supervisor do LABORATORIO DE ENSAIOS ELETRICOS n√£o encontrado")
        return None

def test_endpoints_funcionando(cookies):
    """Testar se todos os endpoints est√£o funcionando sem erros"""
    print(f"\n{'='*60}")
    print("üîó TESTE: Endpoints Funcionando")
    
    endpoints = [
        "/api/pcp/ordens-servico",
        "/api/pcp/programacoes", 
        "/api/pcp/pendencias",
        "/api/pcp/dashboard/avancado?periodo_dias=30",
        "/api/pcp/alertas",
        "/api/pcp/pendencias/dashboard?periodo_dias=30",
        "/api/pcp/programacao-form-data"
    ]
    
    todos_funcionando = True
    
    for endpoint in endpoints:
        try:
            response = requests.get(f"{BASE_URL}{endpoint}", cookies=cookies)
            if response.status_code == 200:
                print(f"‚úÖ {endpoint}")
            else:
                print(f"‚ùå {endpoint} - Status: {response.status_code}")
                todos_funcionando = False
        except Exception as e:
            print(f"‚ùå {endpoint} - Erro: {e}")
            todos_funcionando = False
    
    return todos_funcionando

def main():
    """Fun√ß√£o principal do teste"""
    print("üß™ TESTE FINAL DAS CORRE√á√ïES SOLICITADAS")
    print("="*60)
    
    # 1. Login
    cookies = test_login()
    if not cookies:
        print("‚ùå Falha no login. Abortando testes.")
        return
    
    # 2. Testar endpoints funcionando
    endpoints_ok = test_endpoints_funcionando(cookies)
    
    # 3. Testar departamento MOTORES e setor LABORATORIO
    setor_laboratorio = test_departamento_motores_setor_laboratorio(cookies)
    
    # 4. Testar supervisores de produ√ß√£o
    supervisor_laboratorio = test_supervisores_producao(cookies)
    
    # Resumo final
    print(f"\n{'='*60}")
    print("üìä RESUMO DOS TESTES")
    print(f"‚úÖ Login: OK")
    print(f"{'‚úÖ' if endpoints_ok else '‚ùå'} Endpoints funcionando: {'OK' if endpoints_ok else 'ERRO'}")
    print(f"{'‚úÖ' if setor_laboratorio else '‚ùå'} Departamento MOTORES / Setor LABORATORIO: {'OK' if setor_laboratorio else 'ERRO'}")
    print(f"{'‚úÖ' if supervisor_laboratorio else '‚ùå'} Supervisores de produ√ß√£o: {'OK' if supervisor_laboratorio else 'ERRO'}")
    
    if all([endpoints_ok, setor_laboratorio, supervisor_laboratorio]):
        print(f"\nüéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Sistema est√° funcionando conforme solicitado:")
        print("   - Departamento MOTORES dispon√≠vel")
        print("   - Setor LABORATORIO DE ENSAIOS ELETRICOS (MOTORES) dispon√≠vel") 
        print("   - Apenas supervisores de produ√ß√£o s√£o mostrados")
        print("   - Endpoints funcionando sem conflitos")
    else:
        print(f"\n‚ö†Ô∏è ALGUNS TESTES FALHARAM - Verificar problemas acima")

if __name__ == "__main__":
    main()
