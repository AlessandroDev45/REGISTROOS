#!/usr/bin/env python3
"""
Teste para verificar se a deduplica√ß√£o est√° funcionando
"""

import requests
import json

BASE_URL = "http://localhost:8000"

def main():
    print("üéØ TESTE: VERIFICAR DEDUPLICA√á√ÉO")
    print("=" * 60)
    
    # Criar sess√£o
    session = requests.Session()
    
    # 1. Fazer login
    print("1. Fazendo login...")
    login_data = {
        "username": "admin@registroos.com",
        "password": "123456"
    }
    
    try:
        login_response = session.post(f"{BASE_URL}/api/login", json=login_data)
        if login_response.status_code == 200:
            user_data = login_response.json().get('user', {})
            print(f"   ‚úÖ Login: {user_data.get('nome_completo', 'N/A')}")
        else:
            print(f"   ‚ùå Erro no login: {login_response.status_code}")
            return
    except Exception as e:
        print(f"   ‚ùå Erro na conex√£o: {e}")
        return
    
    # 2. Verificar dados brutos da API
    print("\n2. üîß Dados BRUTOS da API desenvolvimento:")
    try:
        response = session.get(f"{BASE_URL}/api/desenvolvimento/programacao")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Total: {len(data)} programa√ß√µes")
            
            # Agrupar por ID para verificar duplica√ß√£o
            ids_count = {}
            os_count = {}
            
            for prog in data:
                prog_id = prog.get('id')
                os_numero = prog.get('os_numero', 'N/A')
                
                # Contar IDs
                if prog_id in ids_count:
                    ids_count[prog_id] += 1
                else:
                    ids_count[prog_id] = 1
                
                # Contar OS
                if os_numero in os_count:
                    os_count[os_numero] += 1
                else:
                    os_count[os_numero] = 1
            
            # Verificar duplica√ß√£o por ID
            duplicated_ids = {k: v for k, v in ids_count.items() if v > 1}
            if duplicated_ids:
                print(f"   ‚ùå IDs DUPLICADOS: {duplicated_ids}")
            else:
                print(f"   ‚úÖ Sem duplica√ß√£o de IDs")
            
            # Verificar m√∫ltiplas programa√ß√µes para mesma OS
            multiple_os = {k: v for k, v in os_count.items() if v > 1}
            if multiple_os:
                print(f"   üìä M√∫ltiplas programa√ß√µes para mesma OS: {multiple_os}")
            else:
                print(f"   ‚úÖ Uma programa√ß√£o por OS")
            
            # Mostrar lista detalhada
            print(f"\n   üìã Lista detalhada:")
            for i, prog in enumerate(data, 1):
                print(f"      {i:2d}. ID: {prog.get('id'):2d} | OS: {prog.get('os_numero', 'N/A'):>10s} | Respons√°vel: {prog.get('responsavel_nome', 'N/A')[:20]:>20s} | Data: {prog.get('inicio_previsto', 'N/A')[:10]}")
                
        else:
            print(f"   ‚ùå Erro: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    # 3. Verificar se frontend est√° aplicando deduplica√ß√£o
    print(f"\n3. üí° EXPLICA√á√ÉO:")
    print(f"   - Se h√° m√∫ltiplas programa√ß√µes para mesma OS, isso √© NORMAL")
    print(f"   - Uma OS pode ter v√°rias programa√ß√µes em datas diferentes")
    print(f"   - O frontend deve deduplicar por ID √∫nico, n√£o por OS")
    print(f"   - Duplica√ß√£o de ID seria um BUG real")
    
    print("\n" + "=" * 60)
    print("üéØ TESTE CONCLU√çDO!")
    print("\nüí° PR√ìXIMOS PASSOS:")
    print("   1. Recarregue a p√°gina do frontend")
    print("   2. V√° em Desenvolvimento ‚Üí Programa√ß√£o")
    print("   3. Verifique se n√£o h√° cards duplicados")
    print("   4. Cada programa√ß√£o deve aparecer apenas UMA vez")

if __name__ == "__main__":
    main()
