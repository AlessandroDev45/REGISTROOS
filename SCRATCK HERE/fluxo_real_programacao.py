#!/usr/bin/env python3
"""
FLUXO REAL PROGRAMA√á√ÉO
=====================

Fluxo completo com dados reais:
1. PCP cria programa√ß√£o para setor MECANICA
2. Supervisor atribui para usu√°rio espec√≠fico
3. Usu√°rio v√™ no dashboard
4. Usu√°rio cria apontamento finalizando programa√ß√£o
"""

import requests
import json
from datetime import datetime, timedelta

# Configura√ß√£o
BASE_URL = "http://127.0.0.1:8000"
LOGIN_URL = f"{BASE_URL}/api/login"

# Usu√°rios reais
ADMIN_USER = {"username": "admin@registroos.com", "password": "123456"}
SUPERVISOR_USER = {"username": "supervisor.mecanica_dia@registroos.com", "password": "123456"}
USER_MECANICA = {"username": "user.mecanica_dia@registroos.com", "password": "123456"}

def fazer_login(usuario, nome_usuario):
    """Fazer login e obter sess√£o"""
    print(f"üîê Fazendo login como {nome_usuario}...")
    
    session = requests.Session()
    headers = {"Content-Type": "application/json"}
    
    response = session.post(LOGIN_URL, json=usuario, headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        user_info = data.get('user', {})
        print(f"‚úÖ Login realizado! {user_info.get('nome_completo', 'N/A')} (ID: {user_info.get('id', 'N/A')})")
        return session, user_info
    else:
        print(f"‚ùå Erro no login: {response.status_code}")
        print(f"Resposta: {response.text}")
        return None, None

def criar_programacao_pcp(session):
    """1. PCP cria programa√ß√£o para setor MECANICA"""
    print(f"\nüìã PASSO 1: PCP criando programa√ß√£o para setor MECANICA...")
    
    # Dados da programa√ß√£o
    agora = datetime.now()
    inicio = agora + timedelta(hours=2)
    fim = agora + timedelta(hours=10)
    
    dados_programacao = {
        "id_ordem_servico": 1,  # OS existente
        "inicio_previsto": inicio.isoformat(),
        "fim_previsto": fim.isoformat(),
        "observacoes": "Programa√ß√£o real para teste de fluxo completo - Manuten√ß√£o preventiva motor",
        "id_setor": None,  # Ser√° definido pelo setor
        "prioridade": "ALTA"
    }
    
    try:
        response = session.post(f"{BASE_URL}/api/pcp/programacoes", json=dados_programacao)
        
        if response.status_code == 200:
            data = response.json()
            prog_id = data.get('id')
            print(f"‚úÖ Programa√ß√£o criada pelo PCP! ID: {prog_id}")
            print(f"   OS: {data.get('id_ordem_servico')}")
            print(f"   Status: {data.get('status')}")
            print(f"   In√≠cio: {inicio.strftime('%d/%m/%Y %H:%M')}")
            print(f"   Fim: {fim.strftime('%d/%m/%Y %H:%M')}")
            return prog_id
        else:
            print(f"‚ùå Erro ao criar programa√ß√£o: {response.status_code}")
            print(f"Resposta: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return None

def atribuir_programacao_supervisor(session, prog_id):
    """2. Supervisor atribui programa√ß√£o para usu√°rio espec√≠fico"""
    print(f"\nüë• PASSO 2: Supervisor atribuindo programa√ß√£o {prog_id} para usu√°rio MECANICA...")
    
    # Dados da atribui√ß√£o
    dados_atribuicao = {
        "responsavel_id": 8,  # ID do user.mecanica_dia@registroos.com
        "setor_destino": "MECANICA DIA",  # Nome exato do setor
        "departamento_destino": "MOTORES",  # Departamento correto
        "data_inicio": (datetime.now() + timedelta(hours=1)).isoformat(),
        "data_fim": (datetime.now() + timedelta(hours=9)).isoformat(),
        "observacoes": "Atribu√≠da para usu√°rio MECANICA DIA - executar manuten√ß√£o preventiva"
    }
    
    try:
        response = session.post(f"{BASE_URL}/api/pcp/programacoes/atribuir", json=dados_atribuicao)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Programa√ß√£o atribu√≠da pelo supervisor!")
            print(f"   Respons√°vel ID: {data.get('responsavel_id')}")
            print(f"   Setor: {data.get('setor_destino')}")
            print(f"   Status: {data.get('status')}")
            return True
        else:
            print(f"‚ùå Erro ao atribuir programa√ß√£o: {response.status_code}")
            print(f"Resposta: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def verificar_dashboard_usuario(session, user_info):
    """3. Verificar se programa√ß√£o aparece no dashboard do usu√°rio"""
    print(f"\nüìä PASSO 3: Verificando dashboard do usu√°rio {user_info.get('nome_completo')}...")
    
    try:
        response = session.get(f"{BASE_URL}/api/desenvolvimento/minhas-programacoes")
        
        if response.status_code == 200:
            data = response.json()
            print(f"üìã Dashboard retornou {len(data)} programa√ß√µes")
            
            if len(data) > 0:
                print(f"‚úÖ Programa√ß√µes encontradas no dashboard:")
                for i, prog in enumerate(data):
                    print(f"   {i+1}. ID: {prog.get('id')} - Status: {prog.get('status')}")
                    print(f"      OS: {prog.get('os_numero')} - Respons√°vel: {prog.get('responsavel_nome')}")
                return data
            else:
                print(f"‚ùå Dashboard vazio - programa√ß√£o n√£o aparece")
                return []
        else:
            print(f"‚ùå Erro no dashboard: {response.status_code}")
            return []
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return []

def criar_apontamento_finalizacao(session, prog_id):
    """4. Usu√°rio cria apontamento finalizando a programa√ß√£o"""
    print(f"\nüìù PASSO 4: Criando apontamento para finalizar programa√ß√£o {prog_id}...")
    
    # Dados do apontamento com todos os campos obrigat√≥rios
    agora = datetime.now()
    dados_apontamento = {
        "numero_os": "000012345",  # Campo obrigat√≥rio
        "cliente": "AIR LIQUIDE BRASIL",  # Campo obrigat√≥rio
        "equipamento": "MOTOR ELETRICO PARTIDA",  # Campo obrigat√≥rio
        "tipo_maquina": "MOTOR ELETRICO",  # Campo obrigat√≥rio
        "tipo_atividade": "MANUTENCAO_PREVENTIVA",  # Campo obrigat√≥rio
        "descricao_atividade": "Manuten√ß√£o preventiva conclu√≠da - motor revisado e testado",
        "data_inicio": agora.date().isoformat(),  # Apenas data, sem hora
        "hora_inicio": agora.strftime("%H:%M"),  # Hora separada
        "data_fim": agora.date().isoformat(),  # Apenas data, sem hora
        "hora_fim": (agora + timedelta(hours=6)).strftime("%H:%M"),  # Hora separada
        "observacao": f"Programa√ß√£o {prog_id} finalizada com sucesso",
        "resultado_global": "APROVADO",
        "observacao_resultado": "Manuten√ß√£o realizada conforme procedimento",
        "status_os": "FINALIZADA",
        "retrabalho": False
    }
    
    try:
        response = session.post(f"{BASE_URL}/api/desenvolvimento/os/apontamentos", json=dados_apontamento)
        
        if response.status_code == 200:
            data = response.json()
            apontamento_id = data.get('id')
            print(f"‚úÖ Apontamento criado! ID: {apontamento_id}")
            print(f"   OS: {data.get('id_os')}")
            print(f"   Status: {data.get('status')}")
            print(f"   Descri√ß√£o: {data.get('descricao_atividade')}")
            return apontamento_id
        else:
            print(f"‚ùå Erro ao criar apontamento: {response.status_code}")
            print(f"Resposta: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return None

def finalizar_programacao_automatica(session, prog_id):
    """5. Finalizar programa√ß√£o automaticamente via integra√ß√£o"""
    print(f"\nüèÅ PASSO 5: Finalizando programa√ß√£o {prog_id} automaticamente...")
    
    dados_finalizacao = {
        "programacao_id": prog_id,
        "observacoes": "Programa√ß√£o finalizada automaticamente ap√≥s conclus√£o do apontamento"
    }
    
    try:
        response = session.post(f"{BASE_URL}/api/desenvolvimento/finalizar-programacao", json=dados_finalizacao)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Programa√ß√£o finalizada automaticamente!")
            print(f"   Status: {data.get('status_programacao')}")
            print(f"   Mensagem: {data.get('message')}")
            return True
        else:
            print(f"‚ùå Erro ao finalizar programa√ß√£o: {response.status_code}")
            print(f"Resposta: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def main():
    """Fun√ß√£o principal - fluxo completo"""
    print("üîß FLUXO REAL PROGRAMA√á√ÉO COM DADOS REAIS")
    print("=" * 50)
    
    # PASSO 1: PCP cria programa√ß√£o
    session_admin, admin_info = fazer_login(ADMIN_USER, "ADMIN/PCP")
    if not session_admin:
        return
    
    prog_id = criar_programacao_pcp(session_admin)
    if not prog_id:
        print("‚ùå Falha na cria√ß√£o da programa√ß√£o")
        return
    
    # PASSO 2: Supervisor atribui programa√ß√£o
    session_supervisor, supervisor_info = fazer_login(SUPERVISOR_USER, "SUPERVISOR MECANICA")
    if not session_supervisor:
        return
    
    atribuicao_ok = atribuir_programacao_supervisor(session_supervisor, prog_id)
    if not atribuicao_ok:
        print("‚ùå Falha na atribui√ß√£o da programa√ß√£o")
        return
    
    # PASSO 3: Usu√°rio verifica dashboard
    session_user, user_info = fazer_login(USER_MECANICA, "USU√ÅRIO MECANICA")
    if not session_user:
        return
    
    programacoes_dashboard = verificar_dashboard_usuario(session_user, user_info)
    
    # PASSO 4: Usu√°rio cria apontamento
    apontamento_id = criar_apontamento_finalizacao(session_user, prog_id)
    
    # PASSO 5: Finalizar programa√ß√£o automaticamente
    if apontamento_id:
        finalizar_programacao_automatica(session_user, prog_id)
    
    # RESUMO FINAL
    print(f"\nüìä RESUMO DO FLUXO COMPLETO:")
    print(f"   1. Programa√ß√£o criada pelo PCP: {'‚úÖ' if prog_id else '‚ùå'}")
    print(f"   2. Atribu√≠da pelo supervisor: {'‚úÖ' if atribuicao_ok else '‚ùå'}")
    print(f"   3. Aparece no dashboard do usu√°rio: {'‚úÖ' if len(programacoes_dashboard) > 0 else '‚ùå'}")
    print(f"   4. Apontamento criado: {'‚úÖ' if apontamento_id else '‚ùå'}")
    print(f"   5. Programa√ß√£o finalizada: {'‚úÖ' if apontamento_id else '‚ùå'}")
    
    if prog_id and atribuicao_ok and len(programacoes_dashboard) > 0 and apontamento_id:
        print(f"\nüéâ FLUXO COMPLETO EXECUTADO COM SUCESSO!")
        print(f"‚úÖ TODAS AS FUNCIONALIDADES EST√ÉO FUNCIONANDO!")
    else:
        print(f"\n‚ö†Ô∏è PROBLEMAS IDENTIFICADOS NO FLUXO")
        if not len(programacoes_dashboard) > 0:
            print(f"   - Programa√ß√£o n√£o aparece no dashboard do usu√°rio")
        print(f"\nüí° NECESS√ÅRIO INVESTIGAR E CORRIGIR")

if __name__ == "__main__":
    main()
