#!/usr/bin/env python3
"""
SETUP ADMIN CONFIG - RegistroOS
===============================

Script para configurar dados de admin e criar entidades padr√£o do sistema.
Garante que o sistema tenha dados b√°sicos para funcionamento.

FUNCIONALIDADES:
1. Verificar/Criar usu√°rio admin padr√£o
2. Criar departamentos padr√£o
3. Criar setores padr√£o
4. Criar tipos de m√°quina padr√£o
5. Criar tipos de teste padr√£o
6. Criar tipos de atividade padr√£o
7. Criar descri√ß√µes de atividade padr√£o
8. Criar causas de retrabalho padr√£o
9. Criar tipos de falha padr√£o
10. Criar cliente padr√£o
11. Criar equipamento padr√£o

CREDENCIAIS ADMIN PADR√ÉO:
- Email: admin@registroos.com
- Senha: 123456
- Privilege Level: ADMIN
"""

import sys
import os
from datetime import datetime

# Adicionar o diret√≥rio backend ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy.orm import Session
from config.database_config import get_db
from app.database_models import (
    Usuario, Departamento, Setor, TipoMaquina, TipoTeste,
    Cliente, Equipamento, TipoAtividade, TipoDescricaoAtividade,
    TipoCausaRetrabalho, TipoFalha
)
from app.auth import get_password_hash

def criar_admin_padrao(db: Session):
    """Criar usu√°rio admin padr√£o se n√£o existir"""
    print("üîê Verificando usu√°rio admin...")
    
    admin = db.query(Usuario).filter(Usuario.privilege_level == 'ADMIN').first()
    
    if admin:
        print(f"‚úÖ Admin j√° existe: {admin.email} - {admin.nome_completo}")
        return admin
    
    print("üîß Criando admin padr√£o...")
    
    admin_data = {
        'nome_completo': 'Administrador do Sistema',
        'nome_usuario': 'admin',
        'email': 'admin@registroos.com',
        'matricula': 'ADMIN001',
        'senha_hash': get_password_hash('123456'),
        'setor': 'ADMINISTRA√á√ÉO',
        'cargo': 'Administrador',
        'departamento': 'ADMINISTRA√á√ÉO',
        'privilege_level': 'ADMIN',
        'is_approved': True,
        'trabalha_producao': False,
        'primeiro_login': False,
        'id_setor': 1,
        'id_departamento': 1,
        'data_criacao': datetime.now(),
        'data_ultima_atualizacao': datetime.now()
    }
    
    novo_admin = Usuario(**admin_data)
    db.add(novo_admin)
    db.commit()
    db.refresh(novo_admin)
    
    print(f"‚úÖ Admin criado: {novo_admin.email}")
    print(f"   Senha padr√£o: 123456")
    print(f"   ID: {novo_admin.id}")
    
    return novo_admin

def criar_departamentos_padrao(db: Session):
    """Criar departamentos padr√£o"""
    print("\nüè¢ Criando departamentos padr√£o...")
    
    departamentos_padrao = [
        {
            'nome_tipo': 'MOTORES',
            'descricao': 'Departamento de Motores El√©tricos',
            'ativo': True,
            'data_criacao': datetime.now(),
            'data_ultima_atualizacao': datetime.now()
        },
        {
            'nome_tipo': 'GERADORES',
            'descricao': 'Departamento de Geradores',
            'ativo': True,
            'data_criacao': datetime.now(),
            'data_ultima_atualizacao': datetime.now()
        },
        {
            'nome_tipo': 'TRANSFORMADORES',
            'descricao': 'Departamento de Transformadores',
            'ativo': True,
            'data_criacao': datetime.now(),
            'data_ultima_atualizacao': datetime.now()
        },
        {
            'nome_tipo': 'ADMINISTRA√á√ÉO',
            'descricao': 'Departamento Administrativo',
            'ativo': True,
            'data_criacao': datetime.now(),
            'data_ultima_atualizacao': datetime.now()
        }
    ]
    
    for dept_data in departamentos_padrao:
        dept_existente = db.query(Departamento).filter(
            Departamento.nome_tipo == dept_data['nome_tipo']
        ).first()
        
        if not dept_existente:
            novo_dept = Departamento(**dept_data)
            db.add(novo_dept)
            print(f"   ‚úÖ Criado: {dept_data['nome_tipo']}")
        else:
            print(f"   ‚ö†Ô∏è J√° existe: {dept_data['nome_tipo']}")
    
    db.commit()

def criar_setores_padrao(db: Session):
    """Criar setores padr√£o"""
    print("\nüèóÔ∏è Criando setores padr√£o...")
    
    # Buscar departamentos
    dept_motores = db.query(Departamento).filter(Departamento.nome_tipo == 'MOTORES').first()
    dept_admin = db.query(Departamento).filter(Departamento.nome_tipo == 'ADMINISTRA√á√ÉO').first()
    
    setores_padrao = [
        {
            'nome': 'BOBINAGEM',
            'departamento': 'MOTORES',
            'descricao': 'Setor de Bobinagem de Motores',
            'ativo': True,
            'id_departamento': dept_motores.id if dept_motores else 1,
            'area_tipo': 'PRODU√á√ÉO',
            'supervisor_responsavel': 1,
            'permite_apontamento': True,
            'data_criacao': datetime.now(),
            'data_ultima_atualizacao': datetime.now()
        },
        {
            'nome': 'MONTAGEM',
            'departamento': 'MOTORES',
            'descricao': 'Setor de Montagem de Motores',
            'ativo': True,
            'id_departamento': dept_motores.id if dept_motores else 1,
            'area_tipo': 'PRODU√á√ÉO',
            'supervisor_responsavel': 1,
            'permite_apontamento': True,
            'data_criacao': datetime.now(),
            'data_ultima_atualizacao': datetime.now()
        },
        {
            'nome': 'TESTE',
            'departamento': 'MOTORES',
            'descricao': 'Setor de Testes de Motores',
            'ativo': True,
            'id_departamento': dept_motores.id if dept_motores else 1,
            'area_tipo': 'QUALIDADE',
            'supervisor_responsavel': 1,
            'permite_apontamento': True,
            'data_criacao': datetime.now(),
            'data_ultima_atualizacao': datetime.now()
        },
        {
            'nome': 'ADMINISTRA√á√ÉO',
            'departamento': 'ADMINISTRA√á√ÉO',
            'descricao': 'Setor Administrativo',
            'ativo': True,
            'id_departamento': dept_admin.id if dept_admin else 4,
            'area_tipo': 'ADMINISTRATIVO',
            'supervisor_responsavel': 1,
            'permite_apontamento': False,
            'data_criacao': datetime.now(),
            'data_ultima_atualizacao': datetime.now()
        }
    ]
    
    for setor_data in setores_padrao:
        setor_existente = db.query(Setor).filter(
            Setor.nome == setor_data['nome']
        ).first()
        
        if not setor_existente:
            novo_setor = Setor(**setor_data)
            db.add(novo_setor)
            print(f"   ‚úÖ Criado: {setor_data['nome']}")
        else:
            print(f"   ‚ö†Ô∏è J√° existe: {setor_data['nome']}")
    
    db.commit()

def criar_tipos_maquina_padrao(db: Session):
    """Criar tipos de m√°quina padr√£o"""
    print("\n‚öôÔ∏è Criando tipos de m√°quina padr√£o...")
    
    dept_motores = db.query(Departamento).filter(Departamento.nome_tipo == 'MOTORES').first()
    
    tipos_maquina_padrao = [
        {
            'nome_tipo': 'MOTOR TRIF√ÅSICO',
            'categoria': 'MOTOR',
            'subcategoria': ['ESTATOR', 'ROTOR', 'CARCA√áA'],
            'descricao': 'Motor el√©trico trif√°sico',
            'ativo': True,
            'id_departamento': dept_motores.id if dept_motores else 1,
            'especificacoes_tecnicas': 'Motor trif√°sico padr√£o',
            'campos_teste_resultado': 'Resist√™ncia, Isola√ß√£o, Vibra√ß√£o',
            'setor': 'BOBINAGEM',
            'departamento': 'MOTORES',
            'data_criacao': datetime.now(),
            'data_ultima_atualizacao': datetime.now()
        },
        {
            'nome_tipo': 'MOTOR MONOF√ÅSICO',
            'categoria': 'MOTOR',
            'subcategoria': ['ESTATOR', 'ROTOR'],
            'descricao': 'Motor el√©trico monof√°sico',
            'ativo': True,
            'id_departamento': dept_motores.id if dept_motores else 1,
            'especificacoes_tecnicas': 'Motor monof√°sico padr√£o',
            'campos_teste_resultado': 'Resist√™ncia, Isola√ß√£o',
            'setor': 'BOBINAGEM',
            'departamento': 'MOTORES',
            'data_criacao': datetime.now(),
            'data_ultima_atualizacao': datetime.now()
        }
    ]
    
    for tipo_data in tipos_maquina_padrao:
        tipo_existente = db.query(TipoMaquina).filter(
            TipoMaquina.nome_tipo == tipo_data['nome_tipo']
        ).first()
        
        if not tipo_existente:
            novo_tipo = TipoMaquina(**tipo_data)
            db.add(novo_tipo)
            print(f"   ‚úÖ Criado: {tipo_data['nome_tipo']}")
        else:
            print(f"   ‚ö†Ô∏è J√° existe: {tipo_data['nome_tipo']}")
    
    db.commit()

def main():
    """Fun√ß√£o principal"""
    print("üöÄ SETUP ADMIN CONFIG - RegistroOS")
    print("=" * 50)
    
    try:
        db = next(get_db())
        
        # 1. Criar admin padr√£o
        admin = criar_admin_padrao(db)
        
        # 2. Criar departamentos padr√£o
        criar_departamentos_padrao(db)
        
        # 3. Criar setores padr√£o
        criar_setores_padrao(db)
        
        # 4. Criar tipos de m√°quina padr√£o
        criar_tipos_maquina_padrao(db)
        
        print("\n" + "=" * 50)
        print("‚úÖ SETUP CONCLU√çDO COM SUCESSO!")
        print("\nüìã CREDENCIAIS DE ADMIN:")
        print(f"   Email: admin@registroos.com")
        print(f"   Senha: 123456")
        print(f"   Privilege Level: ADMIN")
        print("\nüåê Acesse: http://localhost:3001")
        print("=" * 50)
        
        db.close()
        
    except Exception as e:
        print(f"‚ùå Erro durante setup: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
